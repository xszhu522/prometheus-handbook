import{_ as t}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as p,c,a as s,b as a,d as l,e as n}from"./app-aeozbcr_.js";const i={},r=n(`<h1 id="简单示例" tabindex="-1"><a class="header-anchor" href="#简单示例" aria-hidden="true">#</a> 简单示例</h1><h2 id="简单的时间序列选择" tabindex="-1"><a class="header-anchor" href="#简单的时间序列选择" aria-hidden="true">#</a> 简单的时间序列选择</h2><p>返回度量指标 <code>http_requests_total</code> 的所有时间序列样本数据：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>http_requests_total
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>返回度量指标名称为 <code>http_requests_total</code>，标签分别是 <code>job=&quot;apiserver&quot;</code>, <code>handler=&quot;/api/comments&quot;</code> 的所有时间序列样本数据：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>http_requests_total<span class="token punctuation">{</span>job<span class="token operator">=</span><span class="token string">&quot;apiserver&quot;</span>, <span class="token assign-left variable">handler</span><span class="token operator">=</span><span class="token string">&quot;/api/comments&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>返回度量指标名称为 <code>http_requests_total</code>，标签分别是 <code>job=&quot;apiserver&quot;</code>, <code>handler=&quot;/api/comments&quot;</code>，且是 5 分钟内的所有时间序列样本数据：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>http_requests_total<span class="token punctuation">{</span>job<span class="token operator">=</span><span class="token string">&quot;apiserver&quot;</span>, <span class="token assign-left variable">handler</span><span class="token operator">=</span><span class="token string">&quot;/api/comments&quot;</span><span class="token punctuation">}</span><span class="token punctuation">[</span>5m<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><blockquote><p><strong>[info] 注意</strong></p><p>一个区间向量表达式不能直接展示在 <code>Graph</code> 图表中，但是可以展示在 <code>Console</code> 视图中。</p></blockquote><br><p>使用正则表达式，你可以通过特定模式匹配标签为 <code>job</code> 的特定任务名，获取这些任务的时间序列。在下面这个例子中, 所有任务名称以 <code>server</code> 结尾。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>http_requests_total<span class="token punctuation">{</span>job<span class="token operator">=~</span><span class="token string">&quot;.*server&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,13),u={href:"https://github.com/google/re2/wiki/Syntax",target:"_blank",rel:"noopener noreferrer"},d=n(`<p>返回度量指标名称是 <code>http_requests_total</code>， 且 http 返回码不以 <code>4</code> 开头的所有时间序列数据：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>http_requests_total<span class="token punctuation">{</span>status<span class="token operator">!</span>~<span class="token string">&quot;4..&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="使用函数-操作符等" tabindex="-1"><a class="header-anchor" href="#使用函数-操作符等" aria-hidden="true">#</a> 使用函数，操作符等</h2><p>返回度量指标 <code>http_requests_total</code> 过去 5 分钟内的 http 请求数的平均增长速率：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rate<span class="token punctuation">(</span>http_requests_total<span class="token punctuation">[</span>5m<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>返回度量指标 <code>http_requests_total</code> 过去 5 分钟内的 http 请求数的平均增长速率总和，维度是 <code>job</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sum<span class="token punctuation">(</span>rate<span class="token punctuation">(</span>http_requests_total<span class="token punctuation">[</span>5m<span class="token punctuation">]</span><span class="token punctuation">))</span> by <span class="token punctuation">(</span>job<span class="token punctuation">)</span>
结果：
<span class="token punctuation">{</span>job<span class="token operator">=</span><span class="token string">&quot;apiserver&quot;</span><span class="token punctuation">}</span>  <span class="token number">0.16666666666666666</span>
<span class="token punctuation">{</span>job<span class="token operator">=</span><span class="token string">&quot;kubelet&quot;</span><span class="token punctuation">}</span>  <span class="token number">0.49999876544124355</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果两个指标具有相同维度的标签，我们可以使用二元操作符计算样本数据，返回值：key: value=标签列表：计算样本值。例如，以下表达式返回每一个实例的空闲内存，单位是 MiB。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>instance_memory_limit_bytes - instance_memory_usage_bytes<span class="token punctuation">)</span> / <span class="token number">1024</span> / <span class="token number">1024</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果想知道每个应用的剩余内存，可以使用如下表达式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sum<span class="token punctuation">(</span>
  instance_memory_limit_bytes - instance_memory_usage_bytes
<span class="token punctuation">)</span> by <span class="token punctuation">(</span>app, proc<span class="token punctuation">)</span> / <span class="token number">1024</span> / <span class="token number">1024</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果相同的集群调度群显示如下的每个实例的 CPU 使用率：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>instance_cpu_time_ns<span class="token punctuation">{</span>app<span class="token operator">=</span><span class="token string">&quot;lion&quot;</span>, <span class="token assign-left variable">proc</span><span class="token operator">=</span><span class="token string">&quot;web&quot;</span>, <span class="token assign-left variable">rev</span><span class="token operator">=</span><span class="token string">&quot;34d0f99&quot;</span>, <span class="token assign-left variable">env</span><span class="token operator">=</span><span class="token string">&quot;prod&quot;</span>, <span class="token assign-left variable">job</span><span class="token operator">=</span><span class="token string">&quot;cluster-manager&quot;</span><span class="token punctuation">}</span>
instance_cpu_time_ns<span class="token punctuation">{</span>app<span class="token operator">=</span><span class="token string">&quot;elephant&quot;</span>, <span class="token assign-left variable">proc</span><span class="token operator">=</span><span class="token string">&quot;worker&quot;</span>, <span class="token assign-left variable">rev</span><span class="token operator">=</span><span class="token string">&quot;34d0f99&quot;</span>, <span class="token assign-left variable">env</span><span class="token operator">=</span><span class="token string">&quot;prod&quot;</span>, <span class="token assign-left variable">job</span><span class="token operator">=</span><span class="token string">&quot;cluster-manager&quot;</span><span class="token punctuation">}</span>
instance_cpu_time_ns<span class="token punctuation">{</span>app<span class="token operator">=</span><span class="token string">&quot;turtle&quot;</span>, <span class="token assign-left variable">proc</span><span class="token operator">=</span><span class="token string">&quot;api&quot;</span>, <span class="token assign-left variable">rev</span><span class="token operator">=</span><span class="token string">&quot;4d3a513&quot;</span>, <span class="token assign-left variable">env</span><span class="token operator">=</span><span class="token string">&quot;prod&quot;</span>, <span class="token assign-left variable">job</span><span class="token operator">=</span><span class="token string">&quot;cluster-manager&quot;</span><span class="token punctuation">}</span>
instance_cpu_time_ns<span class="token punctuation">{</span>app<span class="token operator">=</span><span class="token string">&quot;fox&quot;</span>, <span class="token assign-left variable">proc</span><span class="token operator">=</span><span class="token string">&quot;widget&quot;</span>, <span class="token assign-left variable">rev</span><span class="token operator">=</span><span class="token string">&quot;4d3a513&quot;</span>, <span class="token assign-left variable">env</span><span class="token operator">=</span><span class="token string">&quot;prod&quot;</span>, <span class="token assign-left variable">job</span><span class="token operator">=</span><span class="token string">&quot;cluster-manager&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以按照应用和进程类型来获取 CPU 利用率最高的 3 个样本数据：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>topk<span class="token punctuation">(</span><span class="token number">3</span>, sum<span class="token punctuation">(</span>rate<span class="token punctuation">(</span>instance_cpu_time_ns<span class="token punctuation">[</span>5m<span class="token punctuation">]</span><span class="token punctuation">))</span> by <span class="token punctuation">(</span>app, proc<span class="token punctuation">))</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>假设一个服务实例只有一个时间序列数据，那么我们可以通过下面表达式统计出每个应用的实例数量：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>count<span class="token punctuation">(</span>instance_cpu_time_ns<span class="token punctuation">)</span> by <span class="token punctuation">(</span>app<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,17);function k(b,v){const e=o("ExternalLinkIcon");return p(),c("div",null,[r,s("p",null,[a("Prometheus中的所有正则表达式都使用 "),s("a",u,[a("RE2 语法"),l(e)])]),d])}const h=t(i,[["render",k],["__file","examples.html.vue"]]);export{h as default};
