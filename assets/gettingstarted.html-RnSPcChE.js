import{_ as l}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as i,c,a as n,b as s,d as a,e as t}from"./app-aeozbcr_.js";const r={},p=n("h1",{id:"快速开始",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#快速开始","aria-hidden":"true"},"#"),s(" 快速开始")],-1),u={href:"https://heisenbergye.github.io/",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,"本文类似 “Hello World” 的向导，教你怎么安装，配置，并且用一个简单的例子演示如何使用 Prometheus。你可以在本地下载并运行 Prometheus，配置以采集自身和示例应用的运行数据，然后使用查询语句，规则和图形来使用收集到的时间序列数据。",-1),m=n("h2",{id:"下载和运行-prometheus",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#下载和运行-prometheus","aria-hidden":"true"},"#"),s(" 下载和运行 Prometheus")],-1),v={href:"https://prometheus.io/download",target:"_blank",rel:"noopener noreferrer"},h=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tar</span> xvfz prometheus-*.tar.gz
<span class="token builtin class-name">cd</span> prometheus-*
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在启动 Prometheus 之前，我们先做一些配置。</p><h2 id="配置-prometheus-来监控自己" tabindex="-1"><a class="header-anchor" href="#配置-prometheus-来监控自己" aria-hidden="true">#</a> 配置 Prometheus 来监控自己</h2><p>Prometheus 通过在目标节点的 HTTP 端口上采集 metrics（遥测专用词，度量指标）来监控目标节点（以下会称为“采样目标”）。因为 Prometheus 也以相同的方式暴露自己的数据，所以他也可以采集和检查自己的健康状况。</p><p>虽然在生产实践中 Prometheus 服务器只收集自己的数据没多大作用，但是这是个不错的入门示例。保存以下基础配置到文件 prometheus.yml 中：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">global</span><span class="token punctuation">:</span>
  <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span>     15s <span class="token comment"># By default, scrape targets every 15 seconds.</span>

  <span class="token comment"># Attach these labels to any time series or alerts when communicating with</span>
  <span class="token comment"># external systems (federation, remote storage, Alertmanager).</span>
  <span class="token key atrule">external_labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">monitor</span><span class="token punctuation">:</span> <span class="token string">&#39;codelab-monitor&#39;</span>

<span class="token comment"># A scrape configuration containing exactly one endpoint to scrape:</span>
<span class="token comment"># Here it&#39;s Prometheus itself.</span>
<span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>
  <span class="token comment"># The job name is added as a label \`job=&lt;job_name&gt;\` to any timeseries scraped from this config.</span>
  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">&#39;prometheus&#39;</span>

    <span class="token comment"># Override the global default and scrape targets from this job every 5 seconds.</span>
    <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span> 5s

    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;localhost:9090&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),k={href:"https://prometheus.io/docs/prometheus/latest/configuration/configuration/",target:"_blank",rel:"noopener noreferrer"},b=t(`<h2 id="启动-prometheus" tabindex="-1"><a class="header-anchor" href="#启动-prometheus" aria-hidden="true">#</a> 启动 Prometheus</h2><p>使用上一步创建的配置文件启动 Prometheus，修改以下命令为你的平台中 Prometheus 二进制文件所在路径，执行命令启动：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Start Prometheus.</span>
<span class="token comment"># By default, Prometheus stores its database in ./data (flag --storage.tsdb.path).</span>
./prometheus <span class="token parameter variable">--config.file</span><span class="token operator">=</span>prometheus.yml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时 Prometheus 应该启动了。你应该也可以通过浏览器打开状态页面 <a href="localhost:9090">localhost:9090</a>。稍等几秒钟 Prometheus 就可以从自己的 HTTP metrics 端点收集自己的数据。</p><p>你也可以访问 metrics 端点 <a href="localhost:9090/metrics">localhost:9090/metrics</a> 验证 Prometheus 是否正在提供 metrics 服务。</p><h2 id="使用表达式浏览器" tabindex="-1"><a class="header-anchor" href="#使用表达式浏览器" aria-hidden="true">#</a> 使用表达式浏览器</h2>`,6),g={href:"http://localhost:9090/graph",target:"_blank",rel:"noopener noreferrer"},_=t(`<p>正如你可以从 <a href="localhost:9090/metrics">localhost:9090/metrics</a> 收集 metrics，Prometheus 暴露的一个度量指标称为 prometheus_target_interval_length_seconds（目标擦除之间的实际时间量）。继续在表达式控制台输入：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>prometheus_target_interval_length_seconds
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时应该返回许多不同的时间序列(以及每条记录的最新值)，所有时间序列都有 metric 名称 prometheus_target_interval_length_seconds ，但具有不同的标签。这些标签指定不同延迟百分比和目标组间隔。</p><p>如果我们只关心99%延迟，可以使用以下查询语句来检索信息：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>prometheus_target_interval_length_seconds{quantile=&quot;0.99&quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要计算返回的时间序列数量，可以输入：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>count(prometheus_target_interval_length_seconds)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,7),y={href:"https://prometheus.io/docs/prometheus/latest/querying/basics/",target:"_blank",rel:"noopener noreferrer"},f=n("h2",{id:"使用绘图接口",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用绘图接口","aria-hidden":"true"},"#"),s(" 使用绘图接口")],-1),x={href:"http://localhost:9090/graph",target:"_blank",rel:"noopener noreferrer"},P=t(`<p>例如，输入以下表达式来绘制 Prometheus 自我采集每秒创建块的速率：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>rate(prometheus_tsdb_head_chunks_created_total[1m])
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>实验采用图形范围参数和其他设置。</p><h2 id="启动一些示例应用" tabindex="-1"><a class="header-anchor" href="#启动一些示例应用" aria-hidden="true">#</a> 启动一些示例应用</h2><p>让我们玩点更有意思的东西，启动一些样例目标让 Prometheus 采集。</p><p>Go 客户端库包含一个示例，该示例为具有不同延迟分布的三个服务暴露 RPC 延迟。</p>`,6),j={href:"https://golang.org/doc/install",target:"_blank",rel:"noopener noreferrer"},G={href:"https://golang.org/doc/code.html",target:"_blank",rel:"noopener noreferrer"},T=t(`<p>下载 Prometheus 的 Go 客户端库并运行这三个示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Fetch the client library code and compile example.</span>
<span class="token function">git</span> clone https://github.com/prometheus/client_golang.git
<span class="token builtin class-name">cd</span> client_golang/examples/random
go get <span class="token parameter variable">-d</span>
go build

<span class="token comment"># Start 3 example targets in separate terminals:</span>
./random -listen-address<span class="token operator">=</span>:8080
./random -listen-address<span class="token operator">=</span>:8081
./random -listen-address<span class="token operator">=</span>:8082
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时监听目标启动 http://localhost:8080/metrics, http://localhost:8081/metrics 和 http://localhost:8082/metrics</p><h2 id="配置-prometheus-来监控示例目标" tabindex="-1"><a class="header-anchor" href="#配置-prometheus-来监控示例目标" aria-hidden="true">#</a> 配置 Prometheus 来监控示例目标</h2><p>现在我们配置 Prometheus 来采集这些新的目标。让我们将这三个目标分组到一个名为 <code>example-random</code>的作业。但是，假设前两个端点（即： http://localhost:8080/metrics, http://localhost:8081/metrics ）都是生产级目标应用，第三个端点（即： http://localhost:8082/metrics ）为金丝雀实例。要在 Prometheus 中对此进行建模，我们可以将多组端点添加到单个作业中，为每组目标添加额外的标签。 在此示例中，我们将 <code>group =“production”</code> 标签添加到第一组目标，同时将 <code>group =“canary”</code> 添加到第二组。</p><p>要实现此目的，请将以下作业定义添加到 <code>prometheus.yml</code> 中的 <code>scrape_configs</code> 部分，然后重新启动 Prometheus 实例：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span>       <span class="token string">&#39;example-random&#39;</span>

    <span class="token comment"># Override the global default and scrape targets from this job every 5 seconds.</span>
    <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span> 5s

    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;localhost:8080&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;localhost:8081&#39;</span><span class="token punctuation">]</span>
        <span class="token key atrule">labels</span><span class="token punctuation">:</span>
          <span class="token key atrule">group</span><span class="token punctuation">:</span> <span class="token string">&#39;production&#39;</span>

      <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;localhost:8082&#39;</span><span class="token punctuation">]</span>
        <span class="token key atrule">labels</span><span class="token punctuation">:</span>
          <span class="token key atrule">group</span><span class="token punctuation">:</span> <span class="token string">&#39;canary&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>转到表达式浏览器并验证 Prometheus 现在是否有关于这些示例端点公开的时间序列的信息，例如 rpc_durations_seconds 的 metric 指标。</p><h2 id="配置规则聚合抓取的数据到新的时间序列" tabindex="-1"><a class="header-anchor" href="#配置规则聚合抓取的数据到新的时间序列" aria-hidden="true">#</a> 配置规则聚合抓取的数据到新的时间序列</h2><p>在计算ad-hoc时，聚合了上千个时间序列会使查询会变慢，虽然在我们的示例中不会有这样的问题。 为了提高效率，Prometheus允许您通过配置的录制规则将表达式预先记录到全新的持久时间序列中。假设我们关心的是记录在5分钟窗口内测量的所有实例（但保留作业和服务维度）的 RPC 的平均每秒速率（rpc_durations_seconds_count）。 我们可以这样写：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>avg(rate(rpc_durations_seconds_count[5m])) by (job, service)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>尝试绘制此表达式。</p><p>要将此表达式生成的时间序列记录到名为 <code>job_service：rpc_durations_seconds_count：avg_rate5m</code> 的新的 metric 指标中，请使用以下记录规则创建一个文件并将其另存为<code>prometheus.rules.yml</code>：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">groups</span><span class="token punctuation">:</span>
<span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> example
  <span class="token key atrule">rules</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">record</span><span class="token punctuation">:</span> job_service<span class="token punctuation">:</span>rpc_durations_seconds_count<span class="token punctuation">:</span>avg_rate5m
    <span class="token key atrule">expr</span><span class="token punctuation">:</span> avg(rate(rpc_durations_seconds_count<span class="token punctuation">[</span>5m<span class="token punctuation">]</span>)) by (job<span class="token punctuation">,</span> service)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要使 Prometheus 使用此新规则，需要在 <code>prometheus.yml</code> 中添加 <code>rule_files</code> 语句。 配置现在应该如下所示：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">global</span><span class="token punctuation">:</span>
  <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span>     15s <span class="token comment"># By default, scrape targets every 15 seconds.</span>
  <span class="token key atrule">evaluation_interval</span><span class="token punctuation">:</span> 15s <span class="token comment"># Evaluate rules every 15 seconds.</span>

  <span class="token comment"># Attach these extra labels to all timeseries collected by this Prometheus instance.</span>
  <span class="token key atrule">external_labels</span><span class="token punctuation">:</span>
    <span class="token key atrule">monitor</span><span class="token punctuation">:</span> <span class="token string">&#39;codelab-monitor&#39;</span>

<span class="token key atrule">rule_files</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token string">&#39;prometheus.rules.yml&#39;</span>

<span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">&#39;prometheus&#39;</span>

    <span class="token comment"># Override the global default and scrape targets from this job every 5 seconds.</span>
    <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span> 5s

    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;localhost:9090&#39;</span><span class="token punctuation">]</span>

  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span>       <span class="token string">&#39;example-random&#39;</span>

    <span class="token comment"># Override the global default and scrape targets from this job every 5 seconds.</span>
    <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span> 5s

    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;localhost:8080&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;localhost:8081&#39;</span><span class="token punctuation">]</span>
        <span class="token key atrule">labels</span><span class="token punctuation">:</span>
          <span class="token key atrule">group</span><span class="token punctuation">:</span> <span class="token string">&#39;production&#39;</span>

      <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;localhost:8082&#39;</span><span class="token punctuation">]</span>
        <span class="token key atrule">labels</span><span class="token punctuation">:</span>
          <span class="token key atrule">group</span><span class="token punctuation">:</span> <span class="token string">&#39;canary&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启 Prometheus 是新配置生效，并通过表达式浏览器查询或绘制图表来验证带有新 metric 指标名称 <code>job_service：rpc_durations_seconds_count：avg_rate5m</code> 的新时间序列现在可用。</p>`,17);function B(q,A){const e=o("ExternalLinkIcon");return i(),c("div",null,[p,n("blockquote",null,[n("p",null,[s("译者："),n("a",u,[s("詹叶"),a(e)])])]),d,m,n("p",null,[s("为你的平台下载"),n("a",v,[s("最新版本的 Prometheus"),a(e)]),s("，执行以下命令解压：")]),h,n("p",null,[s("完整配置选项说明，请查看"),n("a",k,[s("配置文档"),a(e)])]),b,n("p",null,[s("让我们来看看 Prometheus 已经收集到的自己的 metrics 数据。为了使用 Prometheus 内置的表达式浏览器，访问 "),n("a",g,[s("http://localhost:9090/graph"),a(e)]),s(' 选择"Graph" 标签页中的 “Console” 视图')]),_,n("p",null,[s("更多表达式语言，请看 "),n("a",y,[s("expression language documentation"),a(e)])]),f,n("p",null,[s("访问 "),n("a",x,[s("http://localhost:9090/graph"),a(e)]),s(' 并选择"Graph" 标签页，打开图形绘制界面')]),P,n("p",null,[s("确保你已经安装了 "),n("a",j,[s("Go 语言编译器"),a(e)]),s("并且指定 "),n("a",G,[s("Go 工作目录"),a(e)]),s(" (在环境变量中指定正确的 GOPATH)")]),T])}const C=l(r,[["render",B],["__file","gettingstarted.html.vue"]]);export{C as default};
