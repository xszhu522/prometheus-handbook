import{_ as r}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as l,c as i,a as e,b as t,d as s,e as a}from"./app-aeozbcr_.js";const p={},c=a(`<h1 id="存储" tabindex="-1"><a class="header-anchor" href="#存储" aria-hidden="true">#</a> 存储</h1><p>Prometheus 2.x 默认将时间序列数据库保存在本地磁盘中，同时也可以将数据保存到任意第三方的存储服务中。</p><h2 id="本地存储" tabindex="-1"><a class="header-anchor" href="#本地存储" aria-hidden="true">#</a> 本地存储</h2><p>Prometheus 采用自定义的存储格式将样本数据保存在本地磁盘当中。</p><h3 id="存储格式" tabindex="-1"><a class="header-anchor" href="#存储格式" aria-hidden="true">#</a> 存储格式</h3><p>Prometheus 按照两个小时为一个时间窗口，将两小时内产生的数据存储在一个块（Block）中。每个块都是一个单独的目录，里面含该时间窗口内的所有样本数据（chunks），元数据文件（meta.json）以及索引文件（index）。其中索引文件会将指标名称和标签索引到样板数据的时间序列中。此期间如果通过 API 删除时间序列，删除记录会保存在单独的逻辑文件 <code>tombstone</code> 当中。</p><p>当前样本数据所在的块会被直接保存在内存中，不会持久化到磁盘中。为了确保 Prometheus 发生崩溃或重启时能够恢复数据，Prometheus 启动时会通过预写日志（write-ahead-log(WAL)）重新记录，从而恢复数据。预写日志文件保存在 <code>wal</code> 目录中，每个文件大小为 <code>128MB</code>。wal 文件包括还没有被压缩的原始数据，所以比常规的块文件大得多。一般情况下，Prometheus 会保留三个 wal 文件，但如果有些高负载服务器需要保存两个小时以上的原始数据，wal 文件的数量就会大于 3 个。</p><p>Prometheus保存块数据的目录结构如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>./data 
   <span class="token operator">|</span>- 01BKGV7JBM69T2G1BGBGM6KB12 <span class="token comment"># 块</span>
      <span class="token operator">|</span>- meta.json  <span class="token comment"># 元数据</span>
      <span class="token operator">|</span>- wal        <span class="token comment"># 写入日志</span>
        <span class="token operator">|</span>- 000002
        <span class="token operator">|</span>- 000001
   <span class="token operator">|</span>- 01BKGTZQ1SYQJTR4PB43C8PD98  <span class="token comment"># 块</span>
      <span class="token operator">|</span>- meta.json  <span class="token comment">#元数据</span>
      <span class="token operator">|</span>- index   <span class="token comment"># 索引文件</span>
      <span class="token operator">|</span>- chunks  <span class="token comment"># 样本数据</span>
        <span class="token operator">|</span>- 000001
      <span class="token operator">|</span>- tombstones <span class="token comment"># 逻辑数据</span>
   <span class="token operator">|</span>- 01BKGTZQ1HHWHV8FBJXW1Y3W0K
      <span class="token operator">|</span>- meta.json
      <span class="token operator">|</span>- wal
        <span class="token operator">|</span>-000001
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最初两个小时的块最终会在后台被压缩成更长的块。</p><blockquote><p><strong>[info] 注意</strong></p><p>本地存储不可复制，无法构建集群，如果本地磁盘或节点出现故障，存储将无法扩展和迁移。因此我们只能把本地存储视为近期数据的短暂滑动窗口。如果你对数据持久化的要求不是很严格，可以使用本地磁盘存储多达数年的数据。</p></blockquote>`,11),d={href:"https://github.com/prometheus/tsdb/blob/master/docs/format/README.md",target:"_blank",rel:"noopener noreferrer"},u=a(`<h3 id="本地存储配置" tabindex="-1"><a class="header-anchor" href="#本地存储配置" aria-hidden="true">#</a> 本地存储配置</h3><p>Prometheus 提供了几个参数来修改本地存储的配置，最主要的有：</p><table><thead><tr><th style="text-align:center;">启动参数</th><th style="text-align:center;">默认值</th><th style="text-align:center;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">--storage.tsdb.path</td><td style="text-align:center;">/data</td><td style="text-align:center;">数据存储路径</td></tr><tr><td style="text-align:center;">--storage.tsdb.retention.time</td><td style="text-align:center;">15d</td><td style="text-align:center;">样本数据在存储中保存的时间。超过该时间限制的数据就会被删除。</td></tr><tr><td style="text-align:center;">--storage.tsdb.retention.size</td><td style="text-align:center;">0</td><td style="text-align:center;">每个块的最大字节数（不包括 wal 文件）。如果超过限制，最早的样本数据会被优先删除。支持的单位有 KB, MB, GB, PB，例如：“512MB”。该参数只是试验性的，可能会在未来的版本中被移除。</td></tr><tr><td style="text-align:center;">--storage.tsdb.retention</td><td style="text-align:center;"></td><td style="text-align:center;">该参数从 2.7 版本开始已经被弃用，使用 --storage.tsdb.retention.time 参数替代</td></tr></tbody></table><p>在一般情况下，Prometheus 中存储的每一个样本大概占用1-2字节大小。如果需要对 Prometheus Server 的本地磁盘空间做容量规划时，可以通过以下公式计算：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>needed_disk_space <span class="token operator">=</span> retention_time_seconds * ingested_samples_per_second * bytes_per_sample
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从上面公式中可以看出在保留时间（retention_time_seconds）和样本大小（bytes_per_sample）不变的情况下，如果想减少本地磁盘的容量需求，只能通过减少每秒获取样本数（ingested_samples_per_second）的方式。因此有两种手段，一是减少时间序列的数量，二是增加采集样本的时间间隔。考虑到 Prometheus 会对时间序列进行压缩效率，减少时间序列的数量效果更明显。</p><p>如果你的本地存储出现故障，最好的办法是停止运行 Prometheus 并删除整个存储目录。因为 Prometheus 的本地存储不支持非 POSIX 兼容的文件系统，一旦发生损坏，将无法恢复。NFS 只有部分兼容 POSIX，大部分实现都不兼容 POSIX。</p><p>除了删除整个目录之外，你也可以尝试删除个别块目录来解决问题。删除每个块目录将会丢失大约两个小时时间窗口的样本数据。所以，<strong>Prometheus 的本地存储并不能实现长期的持久化存储。</strong></p><p>如果同时指定了样本数据在存储中保存的时间和大小，则哪一个参数的限制先触发，就执行哪个参数的策略。</p><h2 id="远程存储" tabindex="-1"><a class="header-anchor" href="#远程存储" aria-hidden="true">#</a> 远程存储</h2><p>Prometheus 的本地存储无法持久化数据，无法灵活扩展。为了保持Prometheus的简单性，Prometheus并没有尝试在自身中解决以上问题，而是通过定义两个标准接口（remote_write/remote_read），让用户可以基于这两个接口对接将数据保存到任意第三方的存储服务中，这种方式在 Promthues 中称为 Remote Storage。</p><p>Prometheus 可以通过两种方式来集成远程存储。</p><h3 id="remote-write" tabindex="-1"><a class="header-anchor" href="#remote-write" aria-hidden="true">#</a> Remote Write</h3><p>用户可以在 Prometheus 配置文件中指定 Remote Write（远程写）的 URL 地址，一旦设置了该配置项，Prometheus 将采集到的样本数据通过 HTTP 的形式发送给适配器（Adaptor）。而用户则可以在适配器中对接外部任意的服务。外部服务可以是真正的存储系统，公有云的存储服务，也可以是消息队列等任意形式。</p><figure><img src="https://hugo-picture.oss-cn-beijing.aliyuncs.com/images/IA5eOL.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="remote-read" tabindex="-1"><a class="header-anchor" href="#remote-read" aria-hidden="true">#</a> Remote Read</h3><p>如下图所示，Promthues 的 Remote Read（远程读）也通过了一个适配器实现。在远程读的流程当中，当用户发起查询请求后，Promthues 将向 remote_read 中配置的 URL 发起查询请求（matchers,ranges），<code>Adaptor</code> 根据请求条件从第三方存储服务中获取响应的数据。同时将数据转换为 Promthues 的原始样本数据返回给 Prometheus Server。</p><p>当获取到样本数据后，Promthues 在本地使用 PromQL 对样本数据进行二次处理。</p><blockquote><p><strong>[info] 注意</strong></p><p>启用远程读设置后，Prometheus 仅从远程存储读取一组时序样本数据（根据标签选择器和时间范围），对于规则文件的处理，以及 Metadata API 的处理都只基于 Prometheus 本地存储完成。这也就意味着远程读在扩展性上有一定的限制，因为所有的样本数据都要首先加载到 Prometheus Server，然后再进行处理。所以 Prometheus 暂时不支持完全分布式处理。</p></blockquote><figure><img src="https://hugo-picture.oss-cn-beijing.aliyuncs.com/images/0irUuL.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>远程读和远程写协议都使用了基于 HTTP 的 snappy 压缩协议的缓冲区编码，目前还不稳定，在以后的版本中可能会被替换成基于 HTTP/2 的 <code>gRPC</code> 协议，前提是 Prometheus 和远程存储之间的所有通信都支持 HTTP/2。</p><h3 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h3>`,22),h={href:"https://www.yangcs.net/prometheus/3-prometheus/configuration.html#remote_write",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.yangcs.net/prometheus/3-prometheus/configuration.html#remote_read",target:"_blank",rel:"noopener noreferrer"},_=a(`<p>关于请求与响应消息的详细信息，可以查看远程存储相关协议的 proto 文件：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code>syntax <span class="token operator">=</span> <span class="token string">&quot;proto3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">package</span> prometheus<span class="token punctuation">;</span>

option go_package <span class="token operator">=</span> <span class="token string">&quot;prompb&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token string">&quot;types.proto&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&quot;gogoproto/gogo.proto&quot;</span><span class="token punctuation">;</span>

message WriteRequest <span class="token punctuation">{</span>
  repeated prometheus<span class="token punctuation">.</span>TimeSeries timeseries <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>gogoproto<span class="token punctuation">.</span>nullable<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

message ReadRequest <span class="token punctuation">{</span>
  repeated Query queries <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

message ReadResponse <span class="token punctuation">{</span>
  <span class="token comment">// In same order as the request&#39;s queries.</span>
  repeated QueryResult results <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

message Query <span class="token punctuation">{</span>
  <span class="token builtin">int64</span> start_timestamp_ms <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token builtin">int64</span> end_timestamp_ms <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
  repeated prometheus<span class="token punctuation">.</span>LabelMatcher matchers <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
  prometheus<span class="token punctuation">.</span>ReadHints hints <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

message QueryResult <span class="token punctuation">{</span>
  <span class="token comment">// Samples within a time series must be ordered by time.</span>
  repeated prometheus<span class="token punctuation">.</span>TimeSeries timeseries <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="支持的远程存储" tabindex="-1"><a class="header-anchor" href="#支持的远程存储" aria-hidden="true">#</a> 支持的远程存储</h3><p>目前 Prometheus 社区也提供了部分对于第三方数据库的 Remote Storage 支持：</p>`,4),b=e("thead",null,[e("tr",null,[e("th",null,"存储服务"),e("th",null,"支持模式")])],-1),g={href:"https://github.com/solarwinds/prometheus2appoptics",target:"_blank",rel:"noopener noreferrer"},k=e("td",null,"write",-1),v={href:"https://github.com/ChronixDB/chronix.ingester",target:"_blank",rel:"noopener noreferrer"},f=e("td",null,"write",-1),x={href:"https://github.com/cortexproject/cortex",target:"_blank",rel:"noopener noreferrer"},P=e("td",null,"read/write",-1),w={href:"https://github.com/crate/crate_adapter",target:"_blank",rel:"noopener noreferrer"},y=e("td",null,"read/write",-1),B={href:"https://github.com/infonova/prometheusbeat",target:"_blank",rel:"noopener noreferrer"},R=e("td",null,"write",-1),T={href:"https://gnocchi.xyz/prometheus.html",target:"_blank",rel:"noopener noreferrer"},S=e("td",null,"write",-1),q={href:"https://github.com/prometheus/prometheus/tree/master/documentation/examples/remote_storage/remote_storage_adapter",target:"_blank",rel:"noopener noreferrer"},M=e("td",null,"write",-1),I={href:"https://docs.influxdata.com/influxdb/latest/supported_protocols/prometheus",target:"_blank",rel:"noopener noreferrer"},L=e("td",null,"read/write",-1),Q={href:"https://github.com/circonus-labs/irondb-prometheus-adapter",target:"_blank",rel:"noopener noreferrer"},V=e("td",null,"read/write",-1),j={href:"https://github.com/Telefonica/prometheus-kafka-adapter",target:"_blank",rel:"noopener noreferrer"},D=e("td",null,"write",-1),G={href:"https://m3db.github.io/m3/integrations/prometheus",target:"_blank",rel:"noopener noreferrer"},H=e("td",null,"read/write",-1),A={href:"https://github.com/prometheus/prometheus/tree/master/documentation/examples/remote_storage/remote_storage_adapter",target:"_blank",rel:"noopener noreferrer"},K=e("td",null,"write",-1),W={href:"https://github.com/timescale/prometheus-postgresql-adapter",target:"_blank",rel:"noopener noreferrer"},C=e("td",null,"read/write",-1),O={href:"https://github.com/signalfx/metricproxy#prometheus",target:"_blank",rel:"noopener noreferrer"},E=e("td",null,"write",-1),N={href:"https://github.com/lukemonahan/splunk_modinput_prometheus#prometheus-remote-write",target:"_blank",rel:"noopener noreferrer"},z=e("td",null,"write",-1),X={href:"https://github.com/bragfoo/TiPrometheus",target:"_blank",rel:"noopener noreferrer"},F=e("td",null,"read/write",-1),J={href:"https://github.com/VictoriaMetrics/VictoriaMetrics",target:"_blank",rel:"noopener noreferrer"},U=e("td",null,"write",-1),Y={href:"https://github.com/wavefrontHQ/prometheus-storage-adapter",target:"_blank",rel:"noopener noreferrer"},Z=e("td",null,"write",-1),$={href:"https://www.yangcs.net/prometheus/6-operating/integrations.html#remote-endpoints-and-storage",target:"_blank",rel:"noopener noreferrer"};function ee(te,ne){const n=o("ExternalLinkIcon");return l(),i("div",null,[c,e("p",null,[t("关于存储格式的详细信息，请参考 "),e("a",d,[t("TSDB 格式"),s(n)])]),u,e("p",null,[t("想知道如何在 Prometheus 中添加远程存储的配置，请参考前面的章节："),e("a",h,[t("配置远程写"),s(n)]),t(" 和 "),e("a",m,[t("配置远程读"),s(n)]),t("。")]),_,e("table",null,[b,e("tbody",null,[e("tr",null,[e("td",null,[e("a",g,[t("AppOptics"),s(n)])]),k]),e("tr",null,[e("td",null,[e("a",v,[t("Chronix"),s(n)])]),f]),e("tr",null,[e("td",null,[e("a",x,[t("Cortex"),s(n)])]),P]),e("tr",null,[e("td",null,[e("a",w,[t("CrateDB"),s(n)])]),y]),e("tr",null,[e("td",null,[e("a",B,[t("Elasticsearch"),s(n)])]),R]),e("tr",null,[e("td",null,[e("a",T,[t("Gnocchi"),s(n)])]),S]),e("tr",null,[e("td",null,[e("a",q,[t("Graphite"),s(n)])]),M]),e("tr",null,[e("td",null,[e("a",I,[t("InfluxDB"),s(n)])]),L]),e("tr",null,[e("td",null,[e("a",Q,[t("IRONdb"),s(n)])]),V]),e("tr",null,[e("td",null,[e("a",j,[t("Kafka"),s(n)])]),D]),e("tr",null,[e("td",null,[e("a",G,[t("M3DB"),s(n)])]),H]),e("tr",null,[e("td",null,[e("a",A,[t("OpenTSDB"),s(n)])]),K]),e("tr",null,[e("td",null,[e("a",W,[t("PostgreSQL/TimescaleDB"),s(n)])]),C]),e("tr",null,[e("td",null,[e("a",O,[t("SignalFx"),s(n)])]),E]),e("tr",null,[e("td",null,[e("a",N,[t("Splunk"),s(n)])]),z]),e("tr",null,[e("td",null,[e("a",X,[t("TiKV"),s(n)])]),F]),e("tr",null,[e("td",null,[e("a",J,[t("VictoriaMetrics"),s(n)])]),U]),e("tr",null,[e("td",null,[e("a",Y,[t("Wavefront"),s(n)])]),Z])])]),e("p",null,[t("更多信息请查看"),e("a",$,[t("集成文档"),s(n)]),t("。")])])}const re=r(p,[["render",ee],["__file","storage.html.vue"]]);export{re as default};
