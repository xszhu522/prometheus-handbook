import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as c,c as u,a as n,b as s,d as t,e}from"./app-aeozbcr_.js";const l={},r=e(`<p>Prometheus 的客户端库中提供了四种核心的指标类型。但这些类型只是在客户端库（客户端可以根据不同的数据类型调用不同的 API 接口）和在线协议中，实际在 Prometheus server 中并不对指标类型进行区分，而是简单地把这些指标统一视为无类型的时间序列。不过，将来我们会努力改变这一现状的。</p><h1 id="counter-计数器" tabindex="-1"><a class="header-anchor" href="#counter-计数器" aria-hidden="true">#</a> Counter（计数器）</h1><p>Counter 类型代表一种样本数据单调递增的指标，即只增不减，除非监控系统发生了重置。例如，你可以使用 counter 类型的指标来表示服务的请求数、已完成的任务数、错误发生的次数等。counter 主要有两个方法：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//将counter值加1.</span>
<span class="token function">Inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 将指定值加到counter值上，如果指定值&lt;0 会panic.</span>
<span class="token function">Add</span><span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Counter 类型数据可以让用户方便的了解事件产生的速率的变化，在 PromQL 内置的相关操作函数可以提供相应的分析，比如以 HTTP 应用请求量来进行说明：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">//通过rate()函数获取HTTP请求量的增长率</span>
<span class="token function">rate</span><span class="token punctuation">(</span>http_requests_total<span class="token punctuation">[</span>5m<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">//查询当前系统中，访问量前10的HTTP地址</span>
<span class="token function">topk</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> http_requests_total<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不要将 counter 类型应用于样本数据非单调递增的指标，例如：当前运行的进程数量（应该用 Gauge 类型）。</p><p>不同语言关于 Counter 的客户端库使用文档：</p>`,8),i={href:"http://godoc.org/github.com/prometheus/client_golang/prometheus#Counter",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/prometheus/client_java/blob/master/simpleclient/src/main/java/io/prometheus/client/Counter.java",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/prometheus/client_python#counter",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/prometheus/client_ruby#counter",target:"_blank",rel:"noopener noreferrer"},_=n("h1",{id:"gauge-仪表盘",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#gauge-仪表盘","aria-hidden":"true"},"#"),s(" Gauge（仪表盘）")],-1),h=n("p",null,"Gauge 类型代表一种样本数据可以任意变化的指标，即可增可减。Gauge 通常用于像温度或者内存使用率这种指标数据，也可以表示能随时增加或减少的“总数”，例如：当前并发请求的数量。",-1),g={href:"https://www.yangcs.net/prometheus/3-prometheus/functions.html#delta",target:"_blank",rel:"noopener noreferrer"},q=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token function">dalta</span><span class="token punctuation">(</span>cpu_temp_celsius<span class="token punctuation">{</span>host<span class="token operator">=</span><span class="token string">&quot;zeus&quot;</span><span class="token punctuation">}</span><span class="token punctuation">[</span>2h<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),b={href:"https://www.yangcs.net/prometheus/3-prometheus/functions.html#predictlinear",target:"_blank",rel:"noopener noreferrer"},v=e(`<div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token function">predict_linear</span><span class="token punctuation">(</span>node_filesystem_free<span class="token punctuation">{</span>job<span class="token operator">=</span><span class="token string">&quot;node&quot;</span><span class="token punctuation">}</span><span class="token punctuation">[</span>2h<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">3600</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不同语言关于 Gauge 的客户端库使用文档：</p>`,2),f={href:"http://godoc.org/github.com/prometheus/client_golang/prometheus#Gauge",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/prometheus/client_java/blob/master/simpleclient/src/main/java/io/prometheus/client/Gauge.java",target:"_blank",rel:"noopener noreferrer"},G={href:"https://github.com/prometheus/client_python#gauge",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/prometheus/client_ruby#gauge",target:"_blank",rel:"noopener noreferrer"},E=e(`<h1 id="histogram-直方图" tabindex="-1"><a class="header-anchor" href="#histogram-直方图" aria-hidden="true">#</a> Histogram（直方图）</h1><p>在大多数情况下人们都倾向于使用某些量化指标的平均值，例如 CPU 的平均使用率、页面的平均响应时间。这种方式的问题很明显，以系统 API 调用的平均响应时间为例：如果大多数 API 请求都维持在 100ms 的响应时间范围内，而个别请求的响应时间需要 5s，那么就会导致某些 WEB 页面的响应时间落到中位数的情况，而这种现象被称为<strong>长尾问题</strong>。</p><p>为了区分是平均的慢还是长尾的慢，最简单的方式就是按照请求延迟的范围进行分组。例如，统计延迟在 0~10ms 之间的请求数有多少而 10~20ms 之间的请求数又有多少。通过这种方式可以快速分析系统慢的原因。Histogram 和 Summary 都是为了能够解决这样问题的存在，通过 Histogram 和 Summary 类型的监控指标，我们可以快速了解监控样本的分布情况。</p><p>Histogram 在一段时间范围内对数据进行采样（通常是请求持续时间或响应大小等），并将其计入可配置的存储桶（bucket）中，后续可通过指定区间筛选样本，也可以统计样本总数，最后一般将数据展示为直方图。</p><p>Histogram 类型的样本会提供三种指标（假设指标名称为 <code>&lt;basename&gt;</code>）：</p><ul><li><p>样本的值分布在 bucket 中的数量，命名为 <code>&lt;basename&gt;_bucket{le=&quot;&lt;上边界&gt;&quot;}</code>。解释的更通俗易懂一点，这个值表示指标值小于等于上边界的所有样本数量。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 在总共2次请求当中。http 请求响应时间 &lt;=0.005 秒 的请求次数为0</span>
io_namespace_http_requests_latency_seconds_histogram_bucket<span class="token punctuation">{</span>path<span class="token operator">=</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span>code<span class="token operator">=</span><span class="token string">&quot;200&quot;</span><span class="token punctuation">,</span>le<span class="token operator">=</span><span class="token string">&quot;0.005&quot;</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token number">0.0</span>
<span class="token comment">// 在总共2次请求当中。http 请求响应时间 &lt;=0.01 秒 的请求次数为0</span>
io_namespace_http_requests_latency_seconds_histogram_bucket<span class="token punctuation">{</span>path<span class="token operator">=</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span>code<span class="token operator">=</span><span class="token string">&quot;200&quot;</span><span class="token punctuation">,</span>le<span class="token operator">=</span><span class="token string">&quot;0.01&quot;</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token number">0.0</span>
<span class="token comment">// 在总共2次请求当中。http 请求响应时间 &lt;=0.025 秒 的请求次数为0</span>
io_namespace_http_requests_latency_seconds_histogram_bucket<span class="token punctuation">{</span>path<span class="token operator">=</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span>code<span class="token operator">=</span><span class="token string">&quot;200&quot;</span><span class="token punctuation">,</span>le<span class="token operator">=</span><span class="token string">&quot;0.025&quot;</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token number">0.0</span>
io_namespace_http_requests_latency_seconds_histogram_bucket<span class="token punctuation">{</span>path<span class="token operator">=</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span>code<span class="token operator">=</span><span class="token string">&quot;200&quot;</span><span class="token punctuation">,</span>le<span class="token operator">=</span><span class="token string">&quot;0.05&quot;</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token number">0.0</span>
io_namespace_http_requests_latency_seconds_histogram_bucket<span class="token punctuation">{</span>path<span class="token operator">=</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span>code<span class="token operator">=</span><span class="token string">&quot;200&quot;</span><span class="token punctuation">,</span>le<span class="token operator">=</span><span class="token string">&quot;0.075&quot;</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token number">0.0</span>
io_namespace_http_requests_latency_seconds_histogram_bucket<span class="token punctuation">{</span>path<span class="token operator">=</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span>code<span class="token operator">=</span><span class="token string">&quot;200&quot;</span><span class="token punctuation">,</span>le<span class="token operator">=</span><span class="token string">&quot;0.1&quot;</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token number">0.0</span>
io_namespace_http_requests_latency_seconds_histogram_bucket<span class="token punctuation">{</span>path<span class="token operator">=</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span>code<span class="token operator">=</span><span class="token string">&quot;200&quot;</span><span class="token punctuation">,</span>le<span class="token operator">=</span><span class="token string">&quot;0.25&quot;</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token number">0.0</span>
io_namespace_http_requests_latency_seconds_histogram_bucket<span class="token punctuation">{</span>path<span class="token operator">=</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span>code<span class="token operator">=</span><span class="token string">&quot;200&quot;</span><span class="token punctuation">,</span>le<span class="token operator">=</span><span class="token string">&quot;0.5&quot;</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token number">0.0</span>
io_namespace_http_requests_latency_seconds_histogram_bucket<span class="token punctuation">{</span>path<span class="token operator">=</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span>code<span class="token operator">=</span><span class="token string">&quot;200&quot;</span><span class="token punctuation">,</span>le<span class="token operator">=</span><span class="token string">&quot;0.75&quot;</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token number">0.0</span>
io_namespace_http_requests_latency_seconds_histogram_bucket<span class="token punctuation">{</span>path<span class="token operator">=</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span>code<span class="token operator">=</span><span class="token string">&quot;200&quot;</span><span class="token punctuation">,</span>le<span class="token operator">=</span><span class="token string">&quot;1.0&quot;</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token number">0.0</span>
io_namespace_http_requests_latency_seconds_histogram_bucket<span class="token punctuation">{</span>path<span class="token operator">=</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span>code<span class="token operator">=</span><span class="token string">&quot;200&quot;</span><span class="token punctuation">,</span>le<span class="token operator">=</span><span class="token string">&quot;2.5&quot;</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token number">0.0</span>
io_namespace_http_requests_latency_seconds_histogram_bucket<span class="token punctuation">{</span>path<span class="token operator">=</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span>code<span class="token operator">=</span><span class="token string">&quot;200&quot;</span><span class="token punctuation">,</span>le<span class="token operator">=</span><span class="token string">&quot;5.0&quot;</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token number">0.0</span>
io_namespace_http_requests_latency_seconds_histogram_bucket<span class="token punctuation">{</span>path<span class="token operator">=</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span>code<span class="token operator">=</span><span class="token string">&quot;200&quot;</span><span class="token punctuation">,</span>le<span class="token operator">=</span><span class="token string">&quot;7.5&quot;</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token number">2.0</span>
<span class="token comment">// 在总共2次请求当中。http 请求响应时间 &lt;=10 秒 的请求次数为 2</span>
io_namespace_http_requests_latency_seconds_histogram_bucket<span class="token punctuation">{</span>path<span class="token operator">=</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span>code<span class="token operator">=</span><span class="token string">&quot;200&quot;</span><span class="token punctuation">,</span>le<span class="token operator">=</span><span class="token string">&quot;10.0&quot;</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token number">2.0</span>
io_namespace_http_requests_latency_seconds_histogram_bucket<span class="token punctuation">{</span>path<span class="token operator">=</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span>code<span class="token operator">=</span><span class="token string">&quot;200&quot;</span><span class="token punctuation">,</span>le<span class="token operator">=</span><span class="token string">&quot;+Inf&quot;</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token number">2.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>所有样本值的大小总和，命名为 <code>&lt;basename&gt;_sum</code>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 实际含义： 发生的2次 http 请求总的响应时间为 13.107670803000001 秒</span>
io_namespace_http_requests_latency_seconds_histogram_sum<span class="token punctuation">{</span>path<span class="token operator">=</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span>code<span class="token operator">=</span><span class="token string">&quot;200&quot;</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token number">13.107670803000001</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>样本总数，命名为 <code>&lt;basename&gt;_count</code>。值和 <code>&lt;basename&gt;_bucket{le=&quot;+Inf&quot;}</code> 相同。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 实际含义： 当前一共发生了 2 次 http 请求</span>
io_namespace_http_requests_latency_seconds_histogram_count<span class="token punctuation">{</span>path<span class="token operator">=</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span>code<span class="token operator">=</span><span class="token string">&quot;200&quot;</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token number">2.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><blockquote><p><strong>[info] 注意</strong></p><p>bucket 可以理解为是对数据指标值域的一个划分，划分的依据应该基于数据值的分布。注意后面的采样点是包含前面的采样点的，假设 <code>xxx_bucket{...,le=&quot;0.01&quot;}</code> 的值为 10，而 <code>xxx_bucket{...,le=&quot;0.05&quot;}</code> 的值为 30，那么意味着这 30 个采样点中，有 10 个是小于 10 ms 的，其余 20 个采样点的响应时间是介于 10 ms 和 50 ms 之间的。</p></blockquote>`,7),T={href:"https://www.yangcs.net/prometheus/3-prometheus/functions.html#histogramquantile",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.wikiwand.com/zh-hans/%E5%88%86%E4%BD%8D%E6%95%B0",target:"_blank",rel:"noopener noreferrer"},H={href:"https://www.wikiwand.com/en/Apdex",target:"_blank",rel:"noopener noreferrer"},P=n("p",null,"不同语言关于 Histogram 的客户端库使用文档：",-1),j={href:"http://godoc.org/github.com/prometheus/client_golang/prometheus#Histogram",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/prometheus/client_java/blob/master/simpleclient/src/main/java/io/prometheus/client/Histogram.java",target:"_blank",rel:"noopener noreferrer"},C={href:"https://github.com/prometheus/client_python#histogram",target:"_blank",rel:"noopener noreferrer"},I={href:"https://github.com/prometheus/client_ruby#histogram",target:"_blank",rel:"noopener noreferrer"},A=e(`<h1 id="summary-摘要" tabindex="-1"><a class="header-anchor" href="#summary-摘要" aria-hidden="true">#</a> Summary（摘要）</h1><p>与 Histogram 类型类似，用于表示一段时间内的数据采样结果（通常是请求持续时间或响应大小等），但它直接存储了分位数（通过客户端计算，然后展示出来），而不是通过区间来计算。</p><p>Summary 类型的样本也会提供三种指标（假设指标名称为 <code>&lt;basename&gt;</code>）：</p><ul><li><p>样本值的分位数分布情况，命名为 <code>&lt;basename&gt;{quantile=&quot;&lt;φ&gt;&quot;}</code>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 含义：这 12 次 http 请求中有 50% 的请求响应时间是 3.052404983s</span>
io_namespace_http_requests_latency_seconds_summary<span class="token punctuation">{</span>path<span class="token operator">=</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span>code<span class="token operator">=</span><span class="token string">&quot;200&quot;</span><span class="token punctuation">,</span>quantile<span class="token operator">=</span><span class="token string">&quot;0.5&quot;</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token number">3.052404983</span>
<span class="token comment">// 含义：这 12 次 http 请求中有 90% 的请求响应时间是 8.003261666s</span>
io_namespace_http_requests_latency_seconds_summary<span class="token punctuation">{</span>path<span class="token operator">=</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span>code<span class="token operator">=</span><span class="token string">&quot;200&quot;</span><span class="token punctuation">,</span>quantile<span class="token operator">=</span><span class="token string">&quot;0.9&quot;</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token number">8.003261666</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>所有样本值的大小总和，命名为 <code>&lt;basename&gt;_sum</code>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 含义：这12次 http 请求的总响应时间为 51.029495508s</span>
io_namespace_http_requests_latency_seconds_summary_sum<span class="token punctuation">{</span>path<span class="token operator">=</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span>code<span class="token operator">=</span><span class="token string">&quot;200&quot;</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token number">51.029495508</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>样本总数，命名为 <code>&lt;basename&gt;_count</code>。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token comment">// 含义：当前一共发生了 12 次 http 请求</span>
io_namespace_http_requests_latency_seconds_summary_count<span class="token punctuation">{</span>path<span class="token operator">=</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>method<span class="token operator">=</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span>code<span class="token operator">=</span><span class="token string">&quot;200&quot;</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token number">12.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>现在可以总结一下 Histogram 与 Summary 的异同：</p><ul><li>它们都包含了 <code>&lt;basename&gt;_sum</code> 和 <code>&lt;basename&gt;_count</code> 指标</li><li>Histogram 需要通过 <code>&lt;basename&gt;_bucket</code> 来计算分位数，而 Summary 则直接存储了分位数的值。</li></ul>`,6),B={href:"https://prometheus.io/docs/practices/histograms",target:"_blank",rel:"noopener noreferrer"},L=n("p",null,"不同语言关于 Summary 的客户端库使用文档：",-1),J={href:"http://godoc.org/github.com/prometheus/client_golang/prometheus#Summary",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/prometheus/client_java/blob/master/simpleclient/src/main/java/io/prometheus/client/Summary.java",target:"_blank",rel:"noopener noreferrer"},R={href:"https://github.com/prometheus/client_python#summary",target:"_blank",rel:"noopener noreferrer"},V={href:"https://github.com/prometheus/client_ruby#summary",target:"_blank",rel:"noopener noreferrer"},Q=n("h1",{id:"参考",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考","aria-hidden":"true"},"#"),s(" 参考")],-1),z={href:"https://www.cnblogs.com/aguncn/p/9920545.html",target:"_blank",rel:"noopener noreferrer"};function D(U,W){const a=p("ExternalLinkIcon");return c(),u("div",null,[r,n("ul",null,[n("li",null,[n("a",i,[s("Go"),t(a)])]),n("li",null,[n("a",k,[s("Java"),t(a)])]),n("li",null,[n("a",d,[s("Python"),t(a)])]),n("li",null,[n("a",m,[s("Ruby"),t(a)])])]),_,h,n("p",null,[s("对于 Gauge 类型的监控指标，通过 PromQL 内置函数 "),n("a",g,[s("delta()"),t(a)]),s(" 可以获取样本在一段时间内的变化情况，例如，计算 CPU 温度在两小时内的差异：")]),q,n("p",null,[s("你还可以通过PromQL 内置函数 "),n("a",b,[s("predict_linear()"),t(a)]),s(" 基于简单线性回归的方式，对样本数据的变化趋势做出预测。例如，基于 2 小时的样本数据，来预测主机可用磁盘空间在 4 个小时之后的剩余情况：")]),v,n("ul",null,[n("li",null,[n("a",f,[s("Go"),t(a)])]),n("li",null,[n("a",y,[s("Java"),t(a)])]),n("li",null,[n("a",G,[s("Python"),t(a)])]),n("li",null,[n("a",x,[s("Ruby"),t(a)])])]),E,n("p",null,[s("可以通过 "),n("a",T,[s("histogram_quantile() 函数"),t(a)]),s("来计算 Histogram 类型样本的"),n("a",w,[s("分位数"),t(a)]),s("。分位数可能不太好理解，你可以理解为分割数据的点。我举个例子，假设样本的 9 分位数（quantile=0.9）的值为 x，即表示小于 x 的采样值的数量占总体采样值的 90%。Histogram 还可以用来计算应用性能指标值（"),n("a",H,[s("Apdex score"),t(a)]),s("）。")]),P,n("ul",null,[n("li",null,[n("a",j,[s("Go"),t(a)])]),n("li",null,[n("a",S,[s("Java"),t(a)])]),n("li",null,[n("a",C,[s("Python"),t(a)])]),n("li",null,[n("a",I,[s("Ruby"),t(a)])])]),A,n("p",null,[s("关于 Summary 与 Histogram 的详细用法，请参考 "),n("a",B,[s("histograms and summaries"),t(a)]),s("。")]),L,n("ul",null,[n("li",null,[n("a",J,[s("Go"),t(a)])]),n("li",null,[n("a",N,[s("Java"),t(a)])]),n("li",null,[n("a",R,[s("Python"),t(a)])]),n("li",null,[n("a",V,[s("Ruby"),t(a)])])]),Q,n("ul",null,[n("li",null,[n("a",z,[s("如何区分prometheus中Histogram和Summary类型的metrics？"),t(a)])])])])}const M=o(l,[["render",D],["__file","metric_types.html.vue"]]);export{M as default};
