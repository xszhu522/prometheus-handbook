import{_ as e}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as t,c as p,a as s,b as a,d as c,e as l}from"./app-aeozbcr_.js";const r={},d=s("h1",{id:"操作符",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#操作符","aria-hidden":"true"},"#"),a(" 操作符")],-1),i=s("h2",{id:"二元运算符",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#二元运算符","aria-hidden":"true"},"#"),a(" 二元运算符")],-1),u={href:"https://prometheus.io/docs/prometheus/latest/querying/operators/#vector-matching",target:"_blank",rel:"noopener noreferrer"},k=l(`<h3 id="算术二元运算符" tabindex="-1"><a class="header-anchor" href="#算术二元运算符" aria-hidden="true">#</a> 算术二元运算符</h3><p>在 Prometheus 系统中支持下面的二元算术运算符：</p><ul><li><code>+</code> 加法</li><li><code>-</code> 减法</li><li><code>*</code> 乘法</li><li><code>/</code> 除法</li><li><code>%</code> 模</li><li><code>^</code> 幂等</li></ul><p>二元运算操作符支持 <code>scalar/scalar(标量/标量)</code>、<code>vector/scalar(向量/标量)</code>、和 <code>vector/vector(向量/向量)</code> 之间的操作。</p><p>在两个标量之间进行数学运算，得到的结果也是标量。</p><p>在向量和标量之间，这个运算符会作用于这个向量的每个样本值上。例如：如果一个时间序列瞬时向量除以 2，操作结果也是一个新的瞬时向量，且度量指标名称不变, 它是原度量指标瞬时向量的每个样本值除以 2。</p><p>如果是瞬时向量与瞬时向量之间进行数学运算时，过程会相对复杂一点，运算符会依次找到与左边向量元素匹配（标签完全一致）的右边向量元素进行运算，如果没找到匹配元素，则直接丢弃。同时新的时间序列将不会包含指标名称。</p><p>例如，如果我们想根据 <code>node_disk_bytes_written</code> 和 <code>node_disk_bytes_read</code> 获取主机磁盘IO的总量，可以使用如下表达式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>node_disk_bytes_written + node_disk_bytes_read
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该表达式返回结果的示例如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span>device<span class="token operator">=</span><span class="token string">&quot;sda&quot;</span>,instance<span class="token operator">=</span><span class="token string">&quot;localhost:9100&quot;</span>,job<span class="token operator">=</span><span class="token string">&quot;node_exporter&quot;</span><span class="token punctuation">}</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token number">1634967552</span>@1518146427.807 + <span class="token number">864551424</span>@1518146427.807
<span class="token punctuation">{</span>device<span class="token operator">=</span><span class="token string">&quot;sdb&quot;</span>,instance<span class="token operator">=</span><span class="token string">&quot;localhost:9100&quot;</span>,job<span class="token operator">=</span><span class="token string">&quot;node_exporter&quot;</span><span class="token punctuation">}</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token number">0</span>@1518146427.807 + <span class="token number">1744384</span>@1518146427.807
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="布尔运算符" tabindex="-1"><a class="header-anchor" href="#布尔运算符" aria-hidden="true">#</a> 布尔运算符</h3><p>目前，Prometheus 支持以下布尔运算符：</p><ul><li><code>==</code> (相等)</li><li><code>!=</code> (不相等)</li><li><code>&gt;</code> (大于)</li><li><code>&lt;</code> (小于)</li><li><code>&gt;=</code> (大于等于)</li><li><code>&lt;=</code> (小于等于)</li></ul><p>布尔运算符被应用于 <code>scalar/scalar（标量/标量）</code>、<code>vector/scalar（向量/标量）</code>，和<code>vector/vector（向量/向量）</code>。默认情况下布尔运算符只会根据时间序列中样本的值，对时间序列进行过滤。我们可以通过在运算符后面使用 <code>bool</code> 修饰符来改变布尔运算的默认行为。使用 bool 修改符后，布尔运算不会对时间序列进行过滤，而是直接依次瞬时向量中的各个样本数据与标量的比较结果 <code>0</code> 或者 <code>1</code>。</p><p>在两个标量之间进行布尔运算，必须提供 bool 修饰符，得到的结果也是标量，即 <code>0</code>（<code>false</code>）或 <code>1</code>（<code>true</code>）。例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">2</span> <span class="token operator">&gt;</span> bool <span class="token number">1</span> <span class="token comment"># 结果为 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>瞬时向量和标量之间的布尔运算，这个运算符会应用到某个当前时刻的每个时序数据上，如果一个时序数据的样本值与这个标量比较的结果是 <code>false</code>，则这个时序数据被丢弃掉，如果是 <code>true</code>, 则这个时序数据被保留在结果中。如果提供了 bool 修饰符，那么比较结果是 <code>0</code> 的时序数据被丢弃掉，而比较结果是 <code>1</code> 的时序数据被保留。例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>http_requests_total <span class="token operator">&gt;</span> <span class="token number">100</span> <span class="token comment"># 结果为 true 或 false</span>
http_requests_total <span class="token operator">&gt;</span> bool <span class="token number">100</span> <span class="token comment"># 结果为 1 或 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>瞬时向量与瞬时向量直接进行布尔运算时，同样遵循默认的匹配模式：依次找到与左边向量元素匹配（标签完全一致）的右边向量元素进行相应的操作，如果没找到匹配元素，或者计算结果为 false，则直接丢弃。如果匹配上了，则将左边向量的度量指标和标签的样本数据写入瞬时向量。如果提供了 bool 修饰符，那么比较结果是 <code>0</code> 的时序数据被丢弃掉，而比较结果是 <code>1</code> 的时序数据（只保留左边向量）被保留。</p><h3 id="集合运算符" tabindex="-1"><a class="header-anchor" href="#集合运算符" aria-hidden="true">#</a> 集合运算符</h3><p>使用瞬时向量表达式能够获取到一个包含多个时间序列的集合，我们称为瞬时向量。 通过集合运算，可以在两个瞬时向量与瞬时向量之间进行相应的集合操作。目前，Prometheus 支持以下集合运算符：</p><ul><li><code>and</code> (并且)</li><li><code>or</code> (或者)</li><li><code>unless</code> (排除)</li></ul><p><strong>vector1 and vector2</strong> 会产生一个由 <code>vector1</code> 的元素组成的新的向量。该向量包含 vector1 中完全匹配 <code>vector2</code> 中的元素组成。</p><p><strong>vector1 or vector2</strong> 会产生一个新的向量，该向量包含 <code>vector1</code> 中所有的样本数据，以及 <code>vector2</code> 中没有与 <code>vector1</code> 匹配到的样本数据。</p><p><strong>vector1 unless vector2</strong> 会产生一个新的向量，新向量中的元素由 <code>vector1</code> 中没有与 <code>vector2</code> 匹配的元素组成。</p><h2 id="匹配模式" tabindex="-1"><a class="header-anchor" href="#匹配模式" aria-hidden="true">#</a> 匹配模式</h2><p>向量与向量之间进行运算操作时会基于默认的匹配规则：依次找到与左边向量元素匹配（标签完全一致）的右边向量元素进行运算，如果没找到匹配元素，则直接丢弃。</p><p>接下来将介绍在 PromQL 中有两种典型的匹配模式：一对一（one-to-one）,多对一（many-to-one）或一对多（one-to-many）。</p><h3 id="一对一匹配" tabindex="-1"><a class="header-anchor" href="#一对一匹配" aria-hidden="true">#</a> 一对一匹配</h3><p>一对一匹配模式会从操作符两边表达式获取的瞬时向量依次比较并找到唯一匹配(标签完全一致)的样本值。默认情况下，使用表达式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>vector1 <span class="token operator">&lt;</span>operator<span class="token operator">&gt;</span> vector2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在操作符两边表达式标签不一致的情况下，可以使用 <code>on(label list)</code> 或者 <code>ignoring(label list）</code>来修改便签的匹配行为。使用 <code>ignoreing</code> 可以在匹配时忽略某些便签。而 <code>on</code> 则用于将匹配行为限定在某些便签之内。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>vector expr<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>bin-op<span class="token operator">&gt;</span> ignoring<span class="token punctuation">(</span><span class="token operator">&lt;</span>label list<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span>vector expr<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>vector expr<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>bin-op<span class="token operator">&gt;</span> on<span class="token punctuation">(</span><span class="token operator">&lt;</span>label list<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span>vector expr<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>例如当存在样本：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>method_code:http_errors:rate5m<span class="token punctuation">{</span>method<span class="token operator">=</span><span class="token string">&quot;get&quot;</span>, <span class="token assign-left variable">code</span><span class="token operator">=</span><span class="token string">&quot;500&quot;</span><span class="token punctuation">}</span>  <span class="token number">24</span>
method_code:http_errors:rate5m<span class="token punctuation">{</span>method<span class="token operator">=</span><span class="token string">&quot;get&quot;</span>, <span class="token assign-left variable">code</span><span class="token operator">=</span><span class="token string">&quot;404&quot;</span><span class="token punctuation">}</span>  <span class="token number">30</span>
method_code:http_errors:rate5m<span class="token punctuation">{</span>method<span class="token operator">=</span><span class="token string">&quot;put&quot;</span>, <span class="token assign-left variable">code</span><span class="token operator">=</span><span class="token string">&quot;501&quot;</span><span class="token punctuation">}</span>  <span class="token number">3</span>
method_code:http_errors:rate5m<span class="token punctuation">{</span>method<span class="token operator">=</span><span class="token string">&quot;post&quot;</span>, <span class="token assign-left variable">code</span><span class="token operator">=</span><span class="token string">&quot;500&quot;</span><span class="token punctuation">}</span> <span class="token number">6</span>
method_code:http_errors:rate5m<span class="token punctuation">{</span>method<span class="token operator">=</span><span class="token string">&quot;post&quot;</span>, <span class="token assign-left variable">code</span><span class="token operator">=</span><span class="token string">&quot;404&quot;</span><span class="token punctuation">}</span> <span class="token number">21</span>

method:http_requests:rate5m<span class="token punctuation">{</span>method<span class="token operator">=</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">}</span>  <span class="token number">600</span>
method:http_requests:rate5m<span class="token punctuation">{</span>method<span class="token operator">=</span><span class="token string">&quot;del&quot;</span><span class="token punctuation">}</span>  <span class="token number">34</span>
method:http_requests:rate5m<span class="token punctuation">{</span>method<span class="token operator">=</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">}</span> <span class="token number">120</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 PromQL 表达式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>method_code:http_errors:rate5m<span class="token punctuation">{</span>code<span class="token operator">=</span><span class="token string">&quot;500&quot;</span><span class="token punctuation">}</span> / ignoring<span class="token punctuation">(</span>code<span class="token punctuation">)</span> method:http_requests:rate5m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该表达式会返回在过去 5 分钟内，HTTP 请求状态码为 500 的在所有请求中的比例。如果没有使用 <code>ignoring(code)</code>，操作符两边表达式返回的瞬时向量中将找不到任何一个标签完全相同的匹配项。</p><p>因此结果如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span>method<span class="token operator">=</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">}</span>  <span class="token number">0.04</span>            //  <span class="token number">24</span> / <span class="token number">600</span>
<span class="token punctuation">{</span>method<span class="token operator">=</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">}</span> <span class="token number">0.05</span>            //   <span class="token number">6</span> / <span class="token number">120</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>同时由于 method 为 <code>put</code> 和 <code>del</code> 的样本找不到匹配项，因此不会出现在结果当中。</p><h3 id="多对一和一对多" tabindex="-1"><a class="header-anchor" href="#多对一和一对多" aria-hidden="true">#</a> 多对一和一对多</h3><p>多对一和一对多两种匹配模式指的是“一”侧的每一个向量元素可以与&quot;多&quot;侧的多个元素匹配的情况。在这种情况下，必须使用 group 修饰符：<code>group_left</code> 或者 <code>group_right</code> 来确定哪一个向量具有更高的基数（充当“多”的角色）。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>vector expr<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>bin-op<span class="token operator">&gt;</span> ignoring<span class="token punctuation">(</span><span class="token operator">&lt;</span>label list<span class="token operator">&gt;</span><span class="token punctuation">)</span> group_left<span class="token punctuation">(</span><span class="token operator">&lt;</span>label list<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span>vector expr<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>vector expr<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>bin-op<span class="token operator">&gt;</span> ignoring<span class="token punctuation">(</span><span class="token operator">&lt;</span>label list<span class="token operator">&gt;</span><span class="token punctuation">)</span> group_right<span class="token punctuation">(</span><span class="token operator">&lt;</span>label list<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span>vector expr<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>vector expr<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>bin-op<span class="token operator">&gt;</span> on<span class="token punctuation">(</span><span class="token operator">&lt;</span>label list<span class="token operator">&gt;</span><span class="token punctuation">)</span> group_left<span class="token punctuation">(</span><span class="token operator">&lt;</span>label list<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span>vector expr<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>vector expr<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>bin-op<span class="token operator">&gt;</span> on<span class="token punctuation">(</span><span class="token operator">&lt;</span>label list<span class="token operator">&gt;</span><span class="token punctuation">)</span> group_right<span class="token punctuation">(</span><span class="token operator">&lt;</span>label list<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span>vector expr<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多对一和一对多两种模式一定是出现在操作符两侧表达式返回的向量标签不一致的情况。因此需要使用 ignoring 和 on 修饰符来排除或者限定匹配的标签列表。</p><p>例如，使用表达式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>method_code:http_errors:rate5m / ignoring<span class="token punctuation">(</span>code<span class="token punctuation">)</span> group_left method:http_requests:rate5m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该表达式中，左向量 <code>method_code:http_errors:rate5m</code> 包含两个标签 <code>method</code> 和 <code>code</code>。而右向量 <code>method:http_requests:rate5m</code> 中只包含一个标签 <code>method</code>，因此匹配时需要使用 <code>ignoring</code> 限定匹配的标签为 <code>code</code>。 在限定匹配标签后，右向量中的元素可能匹配到多个左向量中的元素 因此该表达式的匹配模式为多对一，需要使用 group 修饰符 <code>group_left</code> 指定左向量具有更好的基数。</p><p>最终的运算结果如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span>method<span class="token operator">=</span><span class="token string">&quot;get&quot;</span>, <span class="token assign-left variable">code</span><span class="token operator">=</span><span class="token string">&quot;500&quot;</span><span class="token punctuation">}</span>  <span class="token number">0.04</span>            //  <span class="token number">24</span> / <span class="token number">600</span>
<span class="token punctuation">{</span>method<span class="token operator">=</span><span class="token string">&quot;get&quot;</span>, <span class="token assign-left variable">code</span><span class="token operator">=</span><span class="token string">&quot;404&quot;</span><span class="token punctuation">}</span>  <span class="token number">0.05</span>            //  <span class="token number">30</span> / <span class="token number">600</span>
<span class="token punctuation">{</span>method<span class="token operator">=</span><span class="token string">&quot;post&quot;</span>, <span class="token assign-left variable">code</span><span class="token operator">=</span><span class="token string">&quot;500&quot;</span><span class="token punctuation">}</span> <span class="token number">0.05</span>            //   <span class="token number">6</span> / <span class="token number">120</span>
<span class="token punctuation">{</span>method<span class="token operator">=</span><span class="token string">&quot;post&quot;</span>, <span class="token assign-left variable">code</span><span class="token operator">=</span><span class="token string">&quot;404&quot;</span><span class="token punctuation">}</span> <span class="token number">0.175</span>           //  <span class="token number">21</span> / <span class="token number">120</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>提醒：<code>group</code> 修饰符只能在比较和数学运算符中使用。在逻辑运算 <code>and</code>，<code>unless</code> 和 <code>or</code> 操作中默认与右向量中的所有元素进行匹配。</p></blockquote><h2 id="聚合操作" tabindex="-1"><a class="header-anchor" href="#聚合操作" aria-hidden="true">#</a> 聚合操作</h2><p>Prometheus 还提供了下列内置的聚合操作符，这些操作符作用域瞬时向量。可以将瞬时表达式返回的样本数据进行聚合，形成一个具有较少样本值的新的时间序列。</p><ul><li><code>sum</code> (求和)</li><li><code>min</code> (最小值)</li><li><code>max</code> (最大值)</li><li><code>avg</code> (平均值)</li><li><code>stddev</code> (标准差)</li><li><code>stdvar</code> (标准差异)</li><li><code>count</code> (计数)</li><li><code>count_values</code> (对 value 进行计数)</li><li><code>bottomk</code> (样本值最小的 k 个元素)</li><li><code>topk</code> (样本值最大的k个元素)</li><li><code>quantile</code> (分布统计)</li></ul><p>这些操作符被用于聚合所有标签维度，或者通过 <code>without</code> 或者 <code>by</code> 子语句来保留不同的维度。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>aggr-op<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">[</span>parameter,<span class="token punctuation">]</span> <span class="token operator">&lt;</span>vector expression<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>without<span class="token operator">|</span>by <span class="token punctuation">(</span><span class="token operator">&lt;</span>label list<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中只有 <code>count_values</code>, <code>quantile</code>, <code>topk</code>, <code>bottomk</code> 支持参数(parameter)。</p><p><code>without</code> 用于从计算结果中移除列举的标签，而保留其它标签。<code>by</code> 则正好相反，结果向量中只保留列出的标签，其余标签则移除。通过 without 和 by 可以按照样本的问题对数据进行聚合。</p><p>例如：</p><p>如果指标 <code>http_requests_total</code> 的时间序列的标签集为 <code>application</code>, <code>instance</code>, 和 <code>group</code>，我们可以通过以下方式计算所有 instance 中每个 application 和 group 的请求总量：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sum<span class="token punctuation">(</span>http_requests_total<span class="token punctuation">)</span> without <span class="token punctuation">(</span>instance<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>等价于</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> sum<span class="token punctuation">(</span>http_requests_total<span class="token punctuation">)</span> by <span class="token punctuation">(</span>application, group<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果只需要计算整个应用的 HTTP 请求总量，可以直接使用表达式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sum<span class="token punctuation">(</span>http_requests_total<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>count_values</code> 用于时间序列中每一个样本值出现的次数。count_values 会为每一个唯一的样本值输出一个时间序列，并且每一个时间序列包含一个额外的标签。这个标签的名字由聚合参数指定，同时这个标签值是唯一的样本值。</p><p>例如要计算运行每个构建版本的二进制文件的数量：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>count_values<span class="token punctuation">(</span><span class="token string">&quot;version&quot;</span>, build_version<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>返回结果如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span>count<span class="token operator">=</span><span class="token string">&quot;641&quot;</span><span class="token punctuation">}</span>   <span class="token number">1</span>
<span class="token punctuation">{</span>count<span class="token operator">=</span><span class="token string">&quot;3226&quot;</span><span class="token punctuation">}</span>  <span class="token number">2</span>
<span class="token punctuation">{</span>count<span class="token operator">=</span><span class="token string">&quot;644&quot;</span><span class="token punctuation">}</span>   <span class="token number">4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>topk</code> 和 <code>bottomk</code> 则用于对样本值进行排序，返回当前样本值前 n 位，或者后 n 位的时间序列。</p><p>获取 HTTP 请求数前 5 位的时序样本数据，可以使用表达式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>topk<span class="token punctuation">(</span><span class="token number">5</span>, http_requests_total<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>quantile</code> 用于计算当前样本数据值的分布情况 quantile(φ, express) ，其中 <code>0 ≤ φ ≤ 1</code>。</p><p>例如，当 φ 为 0.5 时，即表示找到当前样本数据中的中位数：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>quantile<span class="token punctuation">(</span><span class="token number">0.5</span>, http_requests_total<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>返回结果如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token number">656</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="二元运算符优先级" tabindex="-1"><a class="header-anchor" href="#二元运算符优先级" aria-hidden="true">#</a> 二元运算符优先级</h2><p>在 Prometheus 系统中，二元运算符优先级从高到低的顺序为：</p><ol><li><code>^</code></li><li><code>*</code>, <code>/</code>, <code>%</code></li><li><code>+</code>, <code>-</code></li><li><code>==</code>, <code>!=</code>, <code>&lt;=</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&gt;</code></li><li><code>and</code>, <code>unless</code></li><li><code>or</code></li></ol><p>具有相同优先级的运算符是满足结合律的（左结合）。例如，<code>2 * 3 % 2</code> 等价于 <code>(2 * 3) % 2</code>。运算符 <code>^</code> 例外，<code>^</code> 满足的是右结合，例如，<code>2 ^ 3 ^ 2</code> 等价于 <code>2 ^ (3 ^ 2)</code>。</p>`,83);function b(m,v){const n=o("ExternalLinkIcon");return t(),p("div",null,[d,i,s("p",null,[a("Prometheus 的查询语言支持基本的逻辑运算和算术运算。对于两个瞬时向量, "),s("a",u,[a("匹配行为"),c(n)]),a("可以被改变。")]),k])}const q=e(r,[["render",b],["__file","operators.html.vue"]]);export{q as default};
