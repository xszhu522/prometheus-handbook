import{_ as c}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as o,o as i,c as r,a,b as e,d as s,w as l,e as t}from"./app-aeozbcr_.js";const p={},u=a("h1",{id:"初识-promql",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#初识-promql","aria-hidden":"true"},"#"),e(" 初识 PromQL")],-1),h=a("code",null,"PromQL",-1),m={href:"https://prometheus.io/docs/prometheus/latest/querying/api/",target:"_blank",rel:"noopener noreferrer"},_=a("h2",{id:"例子",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#例子","aria-hidden":"true"},"#"),e(" 例子")],-1),b=t('<h2 id="表达式语言数据类型" tabindex="-1"><a class="header-anchor" href="#表达式语言数据类型" aria-hidden="true">#</a> 表达式语言数据类型</h2><p>在 Prometheus 的表达式语言中，表达式或子表达式包括以下四种类型之一：</p><ul><li><strong>瞬时向量（Instant vector）</strong> - 一组时间序列，每个时间序列包含单个样本，它们共享相同的时间戳。也就是说，表达式的返回值中只会包含该时间序列中的最新的一个样本值。而相应的这样的表达式称之为<strong>瞬时向量表达式</strong>。</li><li><strong>区间向量（Range vector）</strong> - 一组时间序列，每个时间序列包含一段时间范围内的样本数据。</li><li><strong>标量（Scalar）</strong> - 一个浮点型的数据值。</li><li><strong>字符串（String）</strong> - 一个简单的字符串值。</li></ul><p>根用户输入的表达式返回的数据类型是否合法取决于用例的不同，例如：瞬时向量表达式返回的数据类型是唯一可以直接绘制成图表的数据类型。</p><h2 id="字面量" tabindex="-1"><a class="header-anchor" href="#字面量" aria-hidden="true">#</a> 字面量</h2><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h3><p>字符串可以用单引号、双引号或反引号指定为文字常量。</p>',7),g={href:"https://golang.org/ref/spec#String_literals",target:"_blank",rel:"noopener noreferrer"},v=a("code",null,"a",-1),k=a("code",null,"b",-1),q=a("code",null,"f",-1),f=a("code",null,"n",-1),x=a("code",null,"r",-1),P=a("code",null,"t",-1),L=a("code",null,"v",-1),T=a("code",null,"\\",-1),j=a("code",null,"\\nnn",-1),Q=a("code",null,"\\xnn",-1),E=a("code",null,"\\unnnn",-1),G=a("code",null,"\\Unnnnnnnn",-1),I=t(`<p>与 Go 不同，Prometheus 不会对反引号内的换行符进行转义。</p><p>例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token string">&quot;this is a string&quot;</span>
<span class="token string">&#39;these are unescaped: \\n \\\\ \\t&#39;</span>
<span class="token variable"><span class="token variable">\`</span>these are not unescaped: <span class="token punctuation">\\</span>n &#39; &quot; <span class="token punctuation">\\</span>t<span class="token variable">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="标量" tabindex="-1"><a class="header-anchor" href="#标量" aria-hidden="true">#</a> 标量</h3><p>标量浮点值可以字面上写成 <code>[-](digits)[.(digits)]</code> 的形式。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-2.43</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="时间序列过滤器" tabindex="-1"><a class="header-anchor" href="#时间序列过滤器" aria-hidden="true">#</a> 时间序列过滤器</h2><h3 id="瞬时向量过滤器" tabindex="-1"><a class="header-anchor" href="#瞬时向量过滤器" aria-hidden="true">#</a> 瞬时向量过滤器</h3><p>瞬时向量过滤器允许在指定的时间戳内选择一组时间序列和每个时间序列的单个样本值。在最简单的形式中，近指定指标（metric）名称。这将生成包含此指标名称的所有时间序列的元素的瞬时向量。</p><p>例如：选择指标名称为 <code>http_requests_total</code> 的所有时间序列：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>http_requests_total
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以通过向花括号（<code>{}</code>）里附加一组标签来进一步过滤时间序列。</p><p>例如：选择指标名称为 <code>http_requests_total</code>，<code>job</code> 标签值为 <code>prometheus</code>，<code>group</code> 标签值为 <code>canary</code> 的时间序列：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>http_requests_total<span class="token punctuation">{</span>job<span class="token operator">=</span><span class="token string">&quot;prometheus&quot;</span>,group<span class="token operator">=</span><span class="token string">&quot;canary&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>PromQL 还支持用户根据时间序列的标签匹配模式来对时间序列进行过滤，目前主要支持两种匹配模式：完全匹配和正则匹配。总共有以下几种标签匹配运算符：</p><ul><li><code>=</code> : 选择与提供的字符串完全相同的标签。</li><li><code>!=</code> : 选择与提供的字符串不相同的标签。</li><li><code>=~</code> : 选择正则表达式与提供的字符串（或子字符串）相匹配的标签。</li><li><code>!~</code> : 选择正则表达式与提供的字符串（或子字符串）不匹配的标签。</li></ul><p>例如：选择指标名称为 <code>http_requests_total</code>，环境为 <code>staging</code>、<code>testing</code> 或 <code>development</code>，HTTP 方法为 <code>GET</code> 的时间序列：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>http_requests_total<span class="token punctuation">{</span>environment<span class="token operator">=~</span><span class="token string">&quot;staging|testing|development&quot;</span>,method<span class="token operator">!=</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>没有指定标签的标签过滤器会选择该指标名称的所有时间序列。</p><p>所有的 PromQL 表达式必须至少包含一个指标名称，或者一个不会匹配到空字符串的标签过滤器。</p><p>以下表达式是非法的（因为会匹配到空字符串）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span>job<span class="token operator">=~</span><span class="token string">&quot;.*&quot;</span><span class="token punctuation">}</span> <span class="token comment"># 非法！</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以下表达式是合法的：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span>job<span class="token operator">=~</span><span class="token string">&quot;.+&quot;</span><span class="token punctuation">}</span>              <span class="token comment"># 合法！</span>
<span class="token punctuation">{</span>job<span class="token operator">=~</span><span class="token string">&quot;.*&quot;</span>,method<span class="token operator">=</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">}</span> <span class="token comment"># 合法！</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>除了使用 <code>&lt;metric name&gt;{label=value}</code> 的形式以外，我们还可以使用内置的 <code>__name__</code> 标签来指定监控指标名称。例如：表达式 <code>http_requests_total</code> 等效于 <code>{__name__=&quot;http_requests_total&quot;}</code>。也可以使用除 <code>=</code> 之外的过滤器（<code>=</code>，<code>=~</code>，<code>~</code>）。以下表达式选择指标名称以 <code>job:</code> 开头的所有指标：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span>__name__<span class="token operator">=~</span><span class="token string">&quot;job:.*&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,26),w={href:"https://github.com/google/re2/wiki/Syntax",target:"_blank",rel:"noopener noreferrer"},y=t(`<h3 id="区间向量过滤器" tabindex="-1"><a class="header-anchor" href="#区间向量过滤器" aria-hidden="true">#</a> 区间向量过滤器</h3><p>区间向量与瞬时向量的工作方式类似，唯一的差异在于在区间向量表达式中我们需要定义时间选择的范围，时间范围通过时间范围选择器 <code>[]</code> 进行定义，以指定应为每个返回的区间向量样本值中提取多长的时间范围。</p><p>时间范围通过数字来表示，单位可以使用以下其中之一的时间单位：</p><ul><li><code>s</code> - 秒</li><li><code>m</code> - 分钟</li><li><code>h</code> - 小时</li><li><code>d</code> - 天</li><li><code>w</code> - 周</li><li><code>y</code> - 年</li></ul><p>例如：选择在过去 5 分钟内指标名称为 <code>http_requests_total</code>，<code>job</code> 标签值为 <code>prometheus</code> 的所有时间序列：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>http_requests_total<span class="token punctuation">{</span>job<span class="token operator">=</span><span class="token string">&quot;prometheus&quot;</span><span class="token punctuation">}</span><span class="token punctuation">[</span>5m<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="时间位移操作" tabindex="-1"><a class="header-anchor" href="#时间位移操作" aria-hidden="true">#</a> 时间位移操作</h3><p>在瞬时向量表达式或者区间向量表达式中，都是以当前时间为基准：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>http_request_total<span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment"># 瞬时向量表达式，选择当前最新的数据</span>
http_request_total<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">[</span>5m<span class="token punctuation">]</span> <span class="token comment"># 区间向量表达式，选择以当前时间为基准，5分钟内的数据</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>而如果我们想查询，5 分钟前的瞬时样本数据，或昨天一天的区间内的样本数据呢? 这个时候我们就可以使用位移操作，位移操作的关键字为 <code>offset</code>。</p><p>例如，以下表达式返回相对于当前查询时间过去 5 分钟的 <code>http_requests_total</code> 值：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>http_requests_total offset 5m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>注意：</strong><code>offset</code> 关键字需要紧跟在选择器（<code>{}</code>）后面。以下表达式是正确的：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sum<span class="token punctuation">(</span>http_requests_total<span class="token punctuation">{</span>method<span class="token operator">=</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">}</span> offset 5m<span class="token punctuation">)</span> // GOOD.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>下面的表达式是不合法的：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sum<span class="token punctuation">(</span>http_requests_total<span class="token punctuation">{</span>method<span class="token operator">=</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> offset 5m // INVALID.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该操作同样适用于区间向量。以下表达式返回指标 <code>http_requests_total</code> 一周前的 5 分钟之内的 HTTP 请求量的增长率：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rate<span class="token punctuation">(</span>http_requests_total<span class="token punctuation">[</span>5m<span class="token punctuation">]</span> offset 1w<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="操作符" tabindex="-1"><a class="header-anchor" href="#操作符" aria-hidden="true">#</a> 操作符</h2><p>使用PromQL除了能够方便的按照查询和过滤时间序列以外，PromQL还支持丰富的操作符，用户可以使用这些操作符对进一步的对事件序列进行二次加工。这些操作符包括：数学运算符，逻辑运算符，布尔运算符等等。详细描述请参考 <a href="">PromQL 操作符</a>。</p><h2 id="内置函数" tabindex="-1"><a class="header-anchor" href="#内置函数" aria-hidden="true">#</a> 内置函数</h2><p>Prometheus 提供了大量的内置函数来处理时序数据，详细描述请参考 <a href="">PromQL 内置函数</a>。</p><h2 id="陷阱" tabindex="-1"><a class="header-anchor" href="#陷阱" aria-hidden="true">#</a> 陷阱</h2><h3 id="失效" tabindex="-1"><a class="header-anchor" href="#失效" aria-hidden="true">#</a> 失效</h3><p>执行查询操作时，独立于当前时刻被选中的时间序列数据所对应的时间戳，这个时间戳主要用来进行聚合操作，包括 <code>sum</code>, <code>avg</code> 等，大多数聚合的时间序列数据所对应的时间戳没有对齐。由于它们的独立性，我们需要在这些时间戳中选择一个时间戳，并以这个时间戳为基准，获取小于且最接近这个时间戳的时间序列数据。</p><p>如果采样目标或告警规则不再返回之前存在的时间序列的样本，则该时间序列将被标记为失效。如果删除了采样目标，则之前返回的时间序列也会很快被标记为失效。</p><p>如果在某个时间序列被标记为失效后在该时间戳处执行查询操作，则不会为该时间序列返回任何值。如果随后在该时间序列中插入了新的样本，则照常返回时间序列数据。</p><p>如果在采样时间戳前 5 分钟（默认情况）未找到任何样本，则该时间戳不会返回任何任何该时间序列的值。这实际上意味着你在图表中看到的数据都是在当前时刻 5 分钟前的数据。</p><p>对于在采样点中包含时间戳的时间序列，不会被标记为失效。在这种情况下，仅使用 5 分钟阈值检测的规则。</p><h3 id="避免慢查询和高负载" tabindex="-1"><a class="header-anchor" href="#避免慢查询和高负载" aria-hidden="true">#</a> 避免慢查询和高负载</h3><p>如果一个查询需要操作非常大的数据量，图表绘制很可能会超时，或者服务器负载过高。因此，在对未知数据构建查询时，始终需要在 Prometheus 表达式浏览器的表格视图中构建查询，直到结果是看起来合理的（最多为数百个，而不是数千个）。只有当你已经充分过滤或者聚合数据时，才切换到图表模式。如果表达式的查询结果仍然需要很长时间才能绘制出来，则需要通过记录规则重新清洗数据。</p><p>像 <code>api_http_requests_total</code> 这样简单的度量指标名称选择器，可以扩展到具有不同标签的数千个时间序列中，这对于 Prometheus 的查询语言是非常重要的。还要记住，对于聚合操作来说，即使输出的时间序列集非常少，它也会在服务器上产生负载。这类似于在关系型数据库中查询一个字段的总和，总是非常缓慢。</p>`,32);function N(S,V){const n=o("ExternalLinkIcon"),d=o("RouterLink");return i(),r("div",null,[u,a("p",null,[e("Prometheus 提供了一种功能表达式语言 "),h,e("，允许用户实时选择和汇聚时间序列数据。表达式的结果可以在浏览器中显示为图形，也可以显示为表格数据，或者由外部系统通过 "),a("a",m,[e("HTTP API"),s(n)]),e(" 调用。")]),_,a("p",null,[e("本节仅供参考，想进一步学习可以通过后面的"),s(d,{to:"/3-prometheus/examples.html"},{default:l(()=>[e("例子")]),_:1}),e("入手。")]),b,a("p",null,[e("PromQL 遵循"),a("a",g,[e("与 Go 相同的转义规则"),s(n)]),e("。在单引号或双引号中，用反斜杠来表示转义序列，后面可以跟 "),v,e(", "),k,e(", "),q,e(", "),f,e(", "),x,e(", "),P,e(", "),L,e(" 或 "),T,e("。特殊字符可以使用八进制（"),j,e("）或者十六进制（"),Q,e("，"),E,e(" 和 "),G,e("）。")]),I,a("p",null,[e("Prometheus 中的所有正则表达式都使用 "),a("a",w,[e("RE2语法"),s(n)]),e("。")]),y])}const H=c(p,[["render",N],["__file","basics.html.vue"]]);export{H as default};
