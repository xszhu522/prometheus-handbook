import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as c,c as r,a,b as n,d as t,e as s}from"./app-aeozbcr_.js";const i={},l=s(`<h1 id="promql-内置函数" tabindex="-1"><a class="header-anchor" href="#promql-内置函数" aria-hidden="true">#</a> PromQL 内置函数</h1><p>Prometheus 提供了其它大量的内置函数，可以对时序数据进行丰富的处理。某些函数有默认的参数，例如：<code>year(v=vector(time()) instant-vector)</code>。其中参数 <code>v</code> 是一个瞬时向量，如果不提供该参数，将使用默认值 <code>vector(time())</code>。instant-vector 表示参数类型。</p><h2 id="abs" tabindex="-1"><a class="header-anchor" href="#abs" aria-hidden="true">#</a> abs()</h2><p><code>abs(v instant-vector)</code> 返回输入向量的所有样本的绝对值。</p><h2 id="absent" tabindex="-1"><a class="header-anchor" href="#absent" aria-hidden="true">#</a> absent()</h2><p><code>absent(v instant-vector)</code>，如果传递给它的向量参数具有样本数据，则返回空向量；如果传递的向量参数没有样本数据，则返回不带度量指标名称且带有标签的时间序列，且样本值为1。</p><p>当监控度量指标时，如果获取到的样本数据是空的， 使用 absent 方法对告警是非常有用的。例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 这里提供的向量有样本数据</span>
absent<span class="token punctuation">(</span>http_requests_total<span class="token punctuation">{</span>method<span class="token operator">=</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token operator">=</span><span class="token operator">&gt;</span> no data
absent<span class="token punctuation">(</span>sum<span class="token punctuation">(</span>http_requests_total<span class="token punctuation">{</span>method<span class="token operator">=</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">}</span><span class="token punctuation">))</span>  <span class="token operator">=</span><span class="token operator">&gt;</span> no data

<span class="token comment"># 由于不存在度量指标 nonexistent，所以 返回不带度量指标名称且带有标签的时间序列，且样本值为1</span>
absent<span class="token punctuation">(</span>nonexistent<span class="token punctuation">{</span>job<span class="token operator">=</span><span class="token string">&quot;myjob&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>job<span class="token operator">=</span><span class="token string">&quot;myjob&quot;</span><span class="token punctuation">}</span>  <span class="token number">1</span>
<span class="token comment"># 正则匹配的 instance 不作为返回 labels 中的一部分</span>
absent<span class="token punctuation">(</span>nonexistent<span class="token punctuation">{</span>job<span class="token operator">=</span><span class="token string">&quot;myjob&quot;</span>,instance<span class="token operator">=~</span><span class="token string">&quot;.*&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>job<span class="token operator">=</span><span class="token string">&quot;myjob&quot;</span><span class="token punctuation">}</span>  <span class="token number">1</span>

<span class="token comment"># sum 函数返回的时间序列不带有标签，且没有样本数据</span>
absent<span class="token punctuation">(</span>sum<span class="token punctuation">(</span>nonexistent<span class="token punctuation">{</span>job<span class="token operator">=</span><span class="token string">&quot;myjob&quot;</span><span class="token punctuation">}</span><span class="token punctuation">))</span>  <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ceil" tabindex="-1"><a class="header-anchor" href="#ceil" aria-hidden="true">#</a> ceil()</h2><p><code>ceil(v instant-vector)</code> 将 v 中所有元素的样本值向上四舍五入到最接近的整数。例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>node_load5<span class="token punctuation">{</span>instance<span class="token operator">=</span><span class="token string">&quot;192.168.1.75:9100&quot;</span><span class="token punctuation">}</span> <span class="token comment"># 结果为 2.79</span>
ceil<span class="token punctuation">(</span>node_load5<span class="token punctuation">{</span>instance<span class="token operator">=</span><span class="token string">&quot;192.168.1.75:9100&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment"># 结果为 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="changes" tabindex="-1"><a class="header-anchor" href="#changes" aria-hidden="true">#</a> changes()</h2><p><code>changes(v range-vector)</code> 输入一个区间向量， 返回这个区间向量内每个样本数据值变化的次数（瞬时向量）。例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 如果样本数据值没有发生变化，则返回结果为 1</span>
changes<span class="token punctuation">(</span>node_load5<span class="token punctuation">{</span>instance<span class="token operator">=</span><span class="token string">&quot;192.168.1.75:9100&quot;</span><span class="token punctuation">}</span><span class="token punctuation">[</span>1m<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># 结果为 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="clamp-max" tabindex="-1"><a class="header-anchor" href="#clamp-max" aria-hidden="true">#</a> clamp_max()</h2><p><code>clamp_max(v instant-vector, max scalar)</code> 函数，输入一个瞬时向量和最大值，样本数据值若大于 max，则改为 max，否则不变。例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>node_load5<span class="token punctuation">{</span>instance<span class="token operator">=</span><span class="token string">&quot;192.168.1.75:9100&quot;</span><span class="token punctuation">}</span> <span class="token comment"># 结果为 2.79</span>
clamp_max<span class="token punctuation">(</span>node_load5<span class="token punctuation">{</span>instance<span class="token operator">=</span><span class="token string">&quot;192.168.1.75:9100&quot;</span><span class="token punctuation">}</span>, <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># 结果为 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="clamp-min" tabindex="-1"><a class="header-anchor" href="#clamp-min" aria-hidden="true">#</a> clamp_min()</h2><p><code>clamp_min(v instant-vector, min scalar)</code> 函数，输入一个瞬时向量和最小值，样本数据值若小于 min，则改为 min，否则不变。例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>node_load5<span class="token punctuation">{</span>instance<span class="token operator">=</span><span class="token string">&quot;192.168.1.75:9100&quot;</span><span class="token punctuation">}</span> <span class="token comment"># 结果为 2.79</span>
clamp_min<span class="token punctuation">(</span>node_load5<span class="token punctuation">{</span>instance<span class="token operator">=</span><span class="token string">&quot;192.168.1.75:9100&quot;</span><span class="token punctuation">}</span>, <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment"># 结果为 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="day-of-month" tabindex="-1"><a class="header-anchor" href="#day-of-month" aria-hidden="true">#</a> day_of_month()</h2><p><code>day_of_month(v=vector(time()) instant-vector)</code> 函数，返回被给定 UTC 时间所在月的第几天。返回值范围：1~31。</p><h2 id="day-of-week" tabindex="-1"><a class="header-anchor" href="#day-of-week" aria-hidden="true">#</a> day_of_week()</h2><p><code>day_of_week(v=vector(time()) instant-vector)</code> 函数，返回被给定 UTC 时间所在周的第几天。返回值范围：0~6，0 表示星期天。</p><h2 id="days-in-month" tabindex="-1"><a class="header-anchor" href="#days-in-month" aria-hidden="true">#</a> days_in_month()</h2><p><code>days_in_month(v=vector(time()) instant-vector)</code> 函数，返回当月一共有多少天。返回值范围：28~31。</p><h2 id="delta" tabindex="-1"><a class="header-anchor" href="#delta" aria-hidden="true">#</a> delta()</h2><p><code>delta(v range-vector)</code> 的参数是一个区间向量，返回一个瞬时向量。它计算一个区间向量 v 的第一个元素和最后一个元素之间的差值。由于这个值被外推到指定的整个时间范围，所以即使样本值都是整数，你仍然可能会得到一个非整数值。</p><p>例如，下面的例子返回过去两小时的 CPU 温度差：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>delta<span class="token punctuation">(</span>cpu_temp_celsius<span class="token punctuation">{</span>host<span class="token operator">=</span><span class="token string">&quot;zeus&quot;</span><span class="token punctuation">}</span><span class="token punctuation">[</span>2h<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个函数一般只用在 Gauge 类型的时间序列上。</p><h2 id="deriv" tabindex="-1"><a class="header-anchor" href="#deriv" aria-hidden="true">#</a> deriv()</h2>`,32),u=a("code",null,"deriv(v range-vector)",-1),d={href:"http://en.wikipedia.org/wiki/Simple_linear_regression",target:"_blank",rel:"noopener noreferrer"},h=s('<p>这个函数一般只用在 Gauge 类型的时间序列上。</p><h2 id="exp" tabindex="-1"><a class="header-anchor" href="#exp" aria-hidden="true">#</a> exp()</h2><p><code>exp(v instant-vector)</code> 函数，输入一个瞬时向量，返回各个样本值的 <code>e</code> 的指数值，即 e 的 N 次方。当 N 的值足够大时会返回 <code>+Inf</code>。特殊情况为：</p><ul><li><code>Exp(+Inf) = +Inf</code></li><li><code>Exp(NaN) = NaN</code></li></ul><h2 id="floor" tabindex="-1"><a class="header-anchor" href="#floor" aria-hidden="true">#</a> floor()</h2><p><code>floor(v instant-vector)</code> 函数与 ceil() 函数相反，将 v 中所有元素的样本值向下四舍五入到最接近的整数。</p><h2 id="histogram-quantile" tabindex="-1"><a class="header-anchor" href="#histogram-quantile" aria-hidden="true">#</a> histogram_quantile()</h2>',7),k=a("code",null,"histogram_quantile(φ float, b instant-vector)",-1),m=a("code",null,"b",-1),v={href:"https://prometheus.io/docs/practices/histograms",target:"_blank",rel:"noopener noreferrer"},b=a("code",null,"b",-1),g=a("code",null,"le",-1),q=a("code",null,"le",-1),_=a("code",null,"_bucket",-1),f=s(`<p>可以使用 <code>rate()</code> 函数来指定分位数计算的时间窗口。</p><p>例如，一个直方图指标名称为 <code>employee_age_bucket_bucket</code>，要计算过去 10 分钟内 第 90 个百分位数，请使用以下表达式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>histogram_quantile<span class="token punctuation">(</span><span class="token number">0.9</span>, rate<span class="token punctuation">(</span>employee_age_bucket_bucket<span class="token punctuation">[</span>10m<span class="token punctuation">]</span><span class="token punctuation">))</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>返回：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span>instance<span class="token operator">=</span><span class="token string">&quot;10.0.86.71:8080&quot;</span>,job<span class="token operator">=</span><span class="token string">&quot;prometheus&quot;</span><span class="token punctuation">}</span> <span class="token number">35.714285714285715</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这表示最近 10 分钟之内 90% 的样本的最大值为 35.714285714285715。</p><p>这个计算结果是每组标签组合成一个时间序列。我们可能不会对所有这些维度（如 <code>job</code>、<code>instance</code> 和 <code>method</code>）感兴趣，并希望将其中的一些维度进行聚合，则可以使用 sum() 函数。例如，以下表达式根据 <code>job</code> 标签来对第 90 个百分位数进行聚合：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># histogram_quantile() 函数必须包含 le 标签</span>
histogram_quantile<span class="token punctuation">(</span><span class="token number">0.9</span>, sum<span class="token punctuation">(</span>rate<span class="token punctuation">(</span>employee_age_bucket_bucket<span class="token punctuation">[</span>10m<span class="token punctuation">]</span><span class="token punctuation">))</span> by <span class="token punctuation">(</span>job, le<span class="token punctuation">))</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要聚合所有的标签，则使用如下表达式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>histogram_quantile<span class="token punctuation">(</span><span class="token number">0.9</span>,sum<span class="token punctuation">(</span>rate<span class="token punctuation">(</span>employee_age_bucket_bucket<span class="token punctuation">[</span>10m<span class="token punctuation">]</span><span class="token punctuation">))</span> by <span class="token punctuation">(</span>le<span class="token punctuation">))</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><blockquote><p><strong>[info] 注意</strong></p><p><code>histogram_quantile</code> 这个函数是根据假定每个区间内的样本分布是线性分布来计算结果值的(也就是说它的结果未必准确)，最高的 bucket 必须是 le=&quot;+Inf&quot; (否则就返回 NaN)。</p><p>如果分位数位于最高的 bucket（+Inf） 中，则返回第二个最高的 bucket 的上边界。如果该 bucket 的上边界大于 0，则假设最低的 bucket 的的下边界为 0，这种情况下在该 bucket 内使用常规的线性插值。</p><p>如果分位数位于最低的 bucket 中，则返回最低 bucket 的上边界。</p></blockquote><p>如果 b 含有少于 2 个 buckets，那么会返回 <code>NaN</code>，如果 φ &lt; 0 会返回 <code>-Inf</code>，如果 φ &gt; 1 会返回 <code>+Inf</code>。</p><h2 id="holt-winters" tabindex="-1"><a class="header-anchor" href="#holt-winters" aria-hidden="true">#</a> holt_winters()</h2><p><code>holt_winters(v range-vector, sf scalar, tf scalar)</code> 函数基于区间向量 v，生成时间序列数据平滑值。平滑因子 <code>sf</code> 越低, 对旧数据的重视程度越高。趋势因子 <code>tf</code> 越高，对数据的趋势的考虑就越多。其中，<code>0&lt; sf, tf &lt;=1</code>。</p><p>holt_winters 仅适用于 Gauge 类型的时间序列。</p><h2 id="hour" tabindex="-1"><a class="header-anchor" href="#hour" aria-hidden="true">#</a> hour()</h2><p><code>hour(v=vector(time()) instant-vector)</code> 函数返回被给定 UTC 时间的当前第几个小时，时间范围：0~23。</p><h2 id="idelta" tabindex="-1"><a class="header-anchor" href="#idelta" aria-hidden="true">#</a> idelta()</h2><p>idelta(v range-vector) 的参数是一个区间向量, 返回一个瞬时向量。它计算最新的 2 个样本值之间的差值。</p><p>这个函数一般只用在 Gauge 类型的时间序列上。</p><h2 id="increase" tabindex="-1"><a class="header-anchor" href="#increase" aria-hidden="true">#</a> increase()</h2><p><code>increase(v range-vector)</code> 函数获取区间向量中的第一个和最后一个样本并返回其增长量, 它会在单调性发生变化时(如由于采样目标重启引起的计数器复位)自动中断。由于这个值被外推到指定的整个时间范围，所以即使样本值都是整数，你仍然可能会得到一个非整数值。</p><p>例如，以下表达式返回区间向量中每个时间序列过去 5 分钟内 HTTP 请求数的增长数：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>increase<span class="token punctuation">(</span>http_requests_total<span class="token punctuation">{</span>job<span class="token operator">=</span><span class="token string">&quot;apiserver&quot;</span><span class="token punctuation">}</span><span class="token punctuation">[</span>5m<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>increase</code> 的返回值类型只能是计数器类型，主要作用是增加图表和数据的可读性。使用 <code>rate</code> 函数记录规则的使用率，以便持续跟踪数据样本值的变化。</p><h2 id="irate" tabindex="-1"><a class="header-anchor" href="#irate" aria-hidden="true">#</a> irate()</h2><p><code>irate(v range-vector)</code> 函数用于计算区间向量的增长率，但是其反应出的是瞬时增长率。irate 函数是通过区间向量中最后两个两本数据来计算区间向量的增长速率，它会在单调性发生变化时(如由于采样目标重启引起的计数器复位)自动中断。这种方式可以避免在时间窗口范围内的“长尾问题”，并且体现出更好的灵敏度，通过irate函数绘制的图标能够更好的反应样本数据的瞬时变化状态。</p><p>例如，以下表达式返回区间向量中每个时间序列过去 5 分钟内最后两个样本数据的 HTTP 请求数的增长率：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>irate<span class="token punctuation">(</span>http_requests_total<span class="token punctuation">{</span>job<span class="token operator">=</span><span class="token string">&quot;api-server&quot;</span><span class="token punctuation">}</span><span class="token punctuation">[</span>5m<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>irate 只能用于绘制快速变化的计数器，在长期趋势分析或者告警中更推荐使用 rate 函数。因为使用 irate 函数时，速率的简短变化会重置 <code>FOR</code> 语句，形成的图形有很多波峰，难以阅读。</p>`,31),x=a("p",null,[a("strong",null,"[info] 注意")],-1),j=a("code",null,"irate()",-1),y={href:"https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators",target:"_blank",rel:"noopener noreferrer"},N=a("code",null,"sum()",-1),I=a("code",null,"_over_time",-1),T=s(`<h2 id="label-join" tabindex="-1"><a class="header-anchor" href="#label-join" aria-hidden="true">#</a> label_join()</h2><p><code>label_join(v instant-vector, dst_label string, separator string, src_label_1 string, src_label_2 string, ...)</code> 函数可以将时间序列 v 中多个标签 <code>src_label</code> 的值，通过 <code>separator</code> 作为连接符写入到一个新的标签 <code>dst_label</code> 中。可以有多个 src_label 标签。</p><p>例如，以下表达式返回的时间序列多了一个 <code>foo</code> 标签，标签值为 <code>etcd,etcd-k8s</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>up<span class="token punctuation">{</span>endpoint<span class="token operator">=</span><span class="token string">&quot;api&quot;</span>,instance<span class="token operator">=</span><span class="token string">&quot;192.168.123.248:2379&quot;</span>,job<span class="token operator">=</span><span class="token string">&quot;etcd&quot;</span>,namespace<span class="token operator">=</span><span class="token string">&quot;monitoring&quot;</span>,service<span class="token operator">=</span><span class="token string">&quot;etcd-k8s&quot;</span><span class="token punctuation">}</span>
<span class="token operator">=</span><span class="token operator">&gt;</span> up<span class="token punctuation">{</span>endpoint<span class="token operator">=</span><span class="token string">&quot;api&quot;</span>,instance<span class="token operator">=</span><span class="token string">&quot;192.168.123.248:2379&quot;</span>,job<span class="token operator">=</span><span class="token string">&quot;etcd&quot;</span>,namespace<span class="token operator">=</span><span class="token string">&quot;monitoring&quot;</span>,service<span class="token operator">=</span><span class="token string">&quot;etcd-k8s&quot;</span><span class="token punctuation">}</span>  <span class="token number">1</span>

label_join<span class="token punctuation">(</span>up<span class="token punctuation">{</span>endpoint<span class="token operator">=</span><span class="token string">&quot;api&quot;</span>,instance<span class="token operator">=</span><span class="token string">&quot;192.168.123.248:2379&quot;</span>,job<span class="token operator">=</span><span class="token string">&quot;etcd&quot;</span>,namespace<span class="token operator">=</span><span class="token string">&quot;monitoring&quot;</span>,service<span class="token operator">=</span><span class="token string">&quot;etcd-k8s&quot;</span><span class="token punctuation">}</span>, <span class="token string">&quot;foo&quot;</span>, <span class="token string">&quot;,&quot;</span>, <span class="token string">&quot;job&quot;</span>, <span class="token string">&quot;service&quot;</span><span class="token punctuation">)</span>
<span class="token operator">=</span><span class="token operator">&gt;</span> up<span class="token punctuation">{</span>endpoint<span class="token operator">=</span><span class="token string">&quot;api&quot;</span>,foo<span class="token operator">=</span><span class="token string">&quot;etcd,etcd-k8s&quot;</span>,instance<span class="token operator">=</span><span class="token string">&quot;192.168.123.248:2379&quot;</span>,job<span class="token operator">=</span><span class="token string">&quot;etcd&quot;</span>,namespace<span class="token operator">=</span><span class="token string">&quot;monitoring&quot;</span>,service<span class="token operator">=</span><span class="token string">&quot;etcd-k8s&quot;</span><span class="token punctuation">}</span>  <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="label-replace" tabindex="-1"><a class="header-anchor" href="#label-replace" aria-hidden="true">#</a> label_replace()</h2><p>为了能够让客户端的图标更具有可读性，可以通过 <code>label_replace</code> 函数为时间序列添加额外的标签。label_replace 的具体参数如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>label_replace<span class="token punctuation">(</span>v instant-vector, dst_label string, replacement string, src_label string, regex string<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该函数会依次对 v 中的每一条时间序列进行处理，通过 <code>regex</code> 匹配 src_label 的值，并将匹配部分 <code>relacement</code> 写入到 dst_label 标签中。如下所示：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>label_replace<span class="token punctuation">(</span>up, <span class="token string">&quot;host&quot;</span>, <span class="token string">&quot;<span class="token variable">$1</span>&quot;</span>, <span class="token string">&quot;instance&quot;</span>,  <span class="token string">&quot;(.*):.*&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>函数处理后，时间序列将包含一个 <code>host</code> 标签，host 标签的值为 Exporter 实例的 IP 地址：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>up<span class="token punctuation">{</span>host<span class="token operator">=</span><span class="token string">&quot;localhost&quot;</span>,instance<span class="token operator">=</span><span class="token string">&quot;localhost:8080&quot;</span>,job<span class="token operator">=</span><span class="token string">&quot;cadvisor&quot;</span><span class="token punctuation">}</span>   <span class="token number">1</span>
up<span class="token punctuation">{</span>host<span class="token operator">=</span><span class="token string">&quot;localhost&quot;</span>,instance<span class="token operator">=</span><span class="token string">&quot;localhost:9090&quot;</span>,job<span class="token operator">=</span><span class="token string">&quot;prometheus&quot;</span><span class="token punctuation">}</span>   <span class="token number">1</span>
up<span class="token punctuation">{</span>host<span class="token operator">=</span><span class="token string">&quot;localhost&quot;</span>,instance<span class="token operator">=</span><span class="token string">&quot;localhost:9100&quot;</span>,job<span class="token operator">=</span><span class="token string">&quot;node&quot;</span><span class="token punctuation">}</span>   <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ln" tabindex="-1"><a class="header-anchor" href="#ln" aria-hidden="true">#</a> ln()</h2><p><code>ln(v instant-vector)</code> 计算瞬时向量 v 中所有样本数据的自然对数。特殊情况：</p><ul><li><code>ln(+Inf) = +Inf</code></li><li><code>ln(0) = -Inf</code></li><li><code>ln(x &lt; 0) = NaN</code></li><li><code>ln(NaN) = NaN</code></li></ul><h2 id="log2" tabindex="-1"><a class="header-anchor" href="#log2" aria-hidden="true">#</a> log2()</h2><p><code>log2(v instant-vector)</code> 函数计算瞬时向量 v 中所有样本数据的二进制对数。特殊情况同上。</p><h2 id="log10" tabindex="-1"><a class="header-anchor" href="#log10" aria-hidden="true">#</a> log10()</h2><p><code>log10(v instant-vector)</code> 计算瞬时向量 v 中所有样本数据的十进制对数。特殊情况同上。</p><h2 id="minute" tabindex="-1"><a class="header-anchor" href="#minute" aria-hidden="true">#</a> minute()</h2><p><code>minute(v=vector(time()) instant-vector)</code> 函数返回给定 UTC 时间当前小时的第多少分钟。结果范围：0~59。</p><h2 id="month" tabindex="-1"><a class="header-anchor" href="#month" aria-hidden="true">#</a> month()</h2><p><code>month(v=vector(time()) instant-vector)</code> 函数返回给定 UTC 时间当前属于第几个月，结果范围：0~12。</p><h2 id="predict-linear" tabindex="-1"><a class="header-anchor" href="#predict-linear" aria-hidden="true">#</a> predict_linear()</h2><p><code>predict_linear(v range-vector, t scalar)</code> 函数可以预测时间序列 v 在 t 秒后的值。它基于简单线性回归的方式，对时间窗口内的样本数据进行统计，从而可以对时间序列的变化趋势做出预测。该函数的返回结果<strong>不带有度量指标</strong>，只有标签列表。</p><p>例如，基于 2 小时的样本数据，来预测主机可用磁盘空间的是否在 4 个小时候被占满，可以使用如下表达式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>predict_linear<span class="token punctuation">(</span>node_filesystem_free<span class="token punctuation">{</span>job<span class="token operator">=</span><span class="token string">&quot;node&quot;</span><span class="token punctuation">}</span><span class="token punctuation">[</span>2h<span class="token punctuation">]</span>, <span class="token number">4</span> * <span class="token number">3600</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过下面的例子来观察返回值：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>predict_linear<span class="token punctuation">(</span>http_requests_total<span class="token punctuation">{</span>code<span class="token operator">=</span><span class="token string">&quot;200&quot;</span>,instance<span class="token operator">=</span><span class="token string">&quot;120.77.65.193:9090&quot;</span>,job<span class="token operator">=</span><span class="token string">&quot;prometheus&quot;</span>,method<span class="token operator">=</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">}</span><span class="token punctuation">[</span>5m<span class="token punctuation">]</span>, <span class="token number">5</span><span class="token punctuation">)</span>
结果：
<span class="token punctuation">{</span>code<span class="token operator">=</span><span class="token string">&quot;200&quot;</span>,handler<span class="token operator">=</span><span class="token string">&quot;query_range&quot;</span>,instance<span class="token operator">=</span><span class="token string">&quot;120.77.65.193:9090&quot;</span>,job<span class="token operator">=</span><span class="token string">&quot;prometheus&quot;</span>,method<span class="token operator">=</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">}</span>  <span class="token number">1</span>
<span class="token punctuation">{</span>code<span class="token operator">=</span><span class="token string">&quot;200&quot;</span>,handler<span class="token operator">=</span><span class="token string">&quot;prometheus&quot;</span>,instance<span class="token operator">=</span><span class="token string">&quot;120.77.65.193:9090&quot;</span>,job<span class="token operator">=</span><span class="token string">&quot;prometheus&quot;</span>,method<span class="token operator">=</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">}</span>   <span class="token number">4283.449995397104</span>
<span class="token punctuation">{</span>code<span class="token operator">=</span><span class="token string">&quot;200&quot;</span>,handler<span class="token operator">=</span><span class="token string">&quot;static&quot;</span>,instance<span class="token operator">=</span><span class="token string">&quot;120.77.65.193:9090&quot;</span>,job<span class="token operator">=</span><span class="token string">&quot;prometheus&quot;</span>,method<span class="token operator">=</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">}</span>   <span class="token number">22.99999999999999</span>
<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个函数一般只用在 Gauge 类型的时间序列上。</p><h2 id="rate" tabindex="-1"><a class="header-anchor" href="#rate" aria-hidden="true">#</a> rate()</h2><p><code>rate(v range-vector)</code> 函数可以直接计算区间向量 v 在时间窗口内平均增长速率，它会在单调性发生变化时(如由于采样目标重启引起的计数器复位)自动中断。该函数的返回结果<strong>不带有度量指标</strong>，只有标签列表。</p><p>例如，以下表达式返回区间向量中每个时间序列过去 5 分钟内 HTTP 请求数的每秒增长率：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rate<span class="token punctuation">(</span>http_requests_total<span class="token punctuation">[</span>5m<span class="token punctuation">]</span><span class="token punctuation">)</span>
结果：
<span class="token punctuation">{</span>code<span class="token operator">=</span><span class="token string">&quot;200&quot;</span>,handler<span class="token operator">=</span><span class="token string">&quot;label_values&quot;</span>,instance<span class="token operator">=</span><span class="token string">&quot;120.77.65.193:9090&quot;</span>,job<span class="token operator">=</span><span class="token string">&quot;prometheus&quot;</span>,method<span class="token operator">=</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">}</span> <span class="token number">0</span>
<span class="token punctuation">{</span>code<span class="token operator">=</span><span class="token string">&quot;200&quot;</span>,handler<span class="token operator">=</span><span class="token string">&quot;query_range&quot;</span>,instance<span class="token operator">=</span><span class="token string">&quot;120.77.65.193:9090&quot;</span>,job<span class="token operator">=</span><span class="token string">&quot;prometheus&quot;</span>,method<span class="token operator">=</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">}</span>  <span class="token number">0</span>
<span class="token punctuation">{</span>code<span class="token operator">=</span><span class="token string">&quot;200&quot;</span>,handler<span class="token operator">=</span><span class="token string">&quot;prometheus&quot;</span>,instance<span class="token operator">=</span><span class="token string">&quot;120.77.65.193:9090&quot;</span>,job<span class="token operator">=</span><span class="token string">&quot;prometheus&quot;</span>,method<span class="token operator">=</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">}</span>   <span class="token number">0.2</span>
<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>rate() 函数返回值类型只能用计数器，在长期趋势分析或者告警中推荐使用这个函数。</p>`,34),w=a("p",null,[a("strong",null,"[info] 注意")],-1),C=a("code",null,"rate()",-1),P={href:"https://prometheus.io/docs/prometheus/latest/querying/operators/#aggregation-operators",target:"_blank",rel:"noopener noreferrer"},U=a("code",null,"sum()",-1),E=a("code",null,"_over_time",-1),G=s('<h2 id="resets" tabindex="-1"><a class="header-anchor" href="#resets" aria-hidden="true">#</a> resets()</h2><p><code>resets(v range-vector)</code> 的参数是一个区间向量。对于每个时间序列，它都返回一个计数器重置的次数。两个连续样本之间的值的减少被认为是一次计数器重置。</p><p>这个函数一般只用在计数器类型的时间序列上。</p><h2 id="round" tabindex="-1"><a class="header-anchor" href="#round" aria-hidden="true">#</a> round()</h2><p><code>round(v instant-vector, to_nearest=1 scalar)</code> 函数与 <code>ceil</code> 和 <code>floor</code> 函数类似，返回向量中所有样本值的最接近的整数。<code>to_nearest</code> 参数是可选的,默认为 1,表示样本返回的是最接近 1 的整数倍的值。你也可以将该参数指定为任意值（也可以是小数），表示样本返回的是最接近它的整数倍的值。</p><h2 id="scalar" tabindex="-1"><a class="header-anchor" href="#scalar" aria-hidden="true">#</a> scalar()</h2><p><code>scalar(v instant-vector)</code> 函数的参数是一个单元素的瞬时向量,它返回其唯一的时间序列的值作为一个标量。如果度量指标的样本数量大于 1 或者等于 0, 则返回 <code>NaN</code>。</p><h2 id="sort" tabindex="-1"><a class="header-anchor" href="#sort" aria-hidden="true">#</a> sort()</h2><p><code>sort(v instant-vector)</code> 函数对向量按元素的值进行升序排序，返回结果：key: value = 度量指标：样本值[升序排列]。</p><h2 id="sort-desc" tabindex="-1"><a class="header-anchor" href="#sort-desc" aria-hidden="true">#</a> sort_desc()</h2><p><code>sort(v instant-vector)</code> 函数对向量按元素的值进行降序排序，返回结果：key: value = 度量指标：样本值[降序排列]。</p><h2 id="sqrt" tabindex="-1"><a class="header-anchor" href="#sqrt" aria-hidden="true">#</a> sqrt()</h2><p><code>sqrt(v instant-vector)</code> 函数计算向量 v 中所有元素的平方根。</p><h2 id="time" tabindex="-1"><a class="header-anchor" href="#time" aria-hidden="true">#</a> time()</h2><p><code>time()</code> 函数返回从 1970-01-01 到现在的秒数。注意：它不是直接返回当前时间，而是时间戳</p><h2 id="timestamp" tabindex="-1"><a class="header-anchor" href="#timestamp" aria-hidden="true">#</a> timestamp()</h2><p><code>timestamp(v instant-vector)</code> 函数返回向量 v 中的每个样本的时间戳（从 1970-01-01 到现在的秒数）。</p><p>该函数从 Prometheus 2.0 版本开始引入。</p><h2 id="vector" tabindex="-1"><a class="header-anchor" href="#vector" aria-hidden="true">#</a> vector()</h2><p><code>vector(s scalar)</code> 函数将标量 s 作为没有标签的向量返回，即返回结果为：key: value= {}, s。</p><h2 id="year" tabindex="-1"><a class="header-anchor" href="#year" aria-hidden="true">#</a> year()</h2><p><code>year(v=vector(time()) instant-vector)</code> 函数返回被给定 UTC 时间的当前年份。</p><h2 id="aggregation-over-time" tabindex="-1"><a class="header-anchor" href="#aggregation-over-time" aria-hidden="true">#</a> <code>&lt;aggregation&gt;_over_time()</code></h2><p>下面的函数列表允许传入一个区间向量，它们会聚合每个时间序列的范围，并返回一个瞬时向量：</p><ul><li><code>avg_over_time(range-vector)</code> : 区间向量内每个度量指标的平均值。</li><li><code>min_over_time(range-vector)</code> : 区间向量内每个度量指标的最小值。</li><li><code>max_over_time(range-vector)</code> : 区间向量内每个度量指标的最大值。</li><li><code>sum_over_time(range-vector)</code> : 区间向量内每个度量指标的求和。</li><li><code>count_over_time(range-vector)</code> : 区间向量内每个度量指标的样本数据个数。</li><li><code>quantile_over_time(scalar, range-vector)</code> : 区间向量内每个度量指标的样本数据值分位数，φ-quantile (0 ≤ φ ≤ 1)。</li><li><code>stddev_over_time(range-vector)</code> : 区间向量内每个度量指标的总体标准差。</li><li><code>stdvar_over_time(range-vector)</code> : 区间向量内每个度量指标的总体标准方差。</li></ul><blockquote><p><strong>[info] 注意</strong></p><p>即使区间向量内的值分布不均匀，它们在聚合时的权重也是相同的。</p></blockquote>',26);function V(B,H){const e=p("ExternalLinkIcon");return c(),r("div",null,[l,a("p",null,[u,n(" 的参数是一个区间向量,返回一个瞬时向量。它使用"),a("a",d,[n("简单的线性回归"),t(e)]),n("计算区间向量 v 中各个时间序列的导数。")]),h,a("p",null,[k,n(" 从 bucket 类型的向量 "),m,n(" 中计算 φ (0 ≤ φ ≤ 1) 分位数（百分位数的一般形式）的样本的最大值。（有关 φ 分位数的详细说明以及直方图指标类型的使用，请参阅"),a("a",v,[n("直方图和摘要"),t(e)]),n("）。向量 "),b,n(" 中的样本是每个 bucket 的采样点数量。每个样本的 labels 中必须要有 "),g,n(" 这个 label 来表示每个 bucket 的上边界，没有 "),q,n(" 标签的样本会被忽略。直方图指标类型自动提供带有 "),_,n(" 后缀和相应标签的时间序列。")]),f,a("blockquote",null,[x,a("p",null,[n("当将 "),j,n(" 函数与"),a("a",y,[n("聚合运算符"),t(e)]),n("（例如 "),N,n("）或随时间聚合的函数（任何以 "),I,n(" 结尾的函数）一起使用时，必须先执行 irate 函数，然后再进行聚合操作，否则当采样目标重新启动时 irate() 无法检测到计数器是否被重置。")])]),T,a("blockquote",null,[w,a("p",null,[n("当将 "),C,n(" 函数与"),a("a",P,[n("聚合运算符"),t(e)]),n("（例如 "),U,n("）或随时间聚合的函数（任何以 "),E,n(" 结尾的函数）一起使用时，必须先执行 rate 函数，然后再进行聚合操作，否则当采样目标重新启动时 rate() 无法检测到计数器是否被重置。")])]),G])}const z=o(i,[["render",V],["__file","functions.html.vue"]]);export{z as default};
