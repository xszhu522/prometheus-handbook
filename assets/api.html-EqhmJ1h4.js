import{_ as o}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as p,o as c,c as l,a as s,b as n,d as e,e as a}from"./app-aeozbcr_.js";const i={},u=a(`<h1 id="在-http-api-中使用-promql" tabindex="-1"><a class="header-anchor" href="#在-http-api-中使用-promql" aria-hidden="true">#</a> 在 HTTP API 中使用 PromQL</h1><p>Prometheus 当前稳定的 HTTP API 可以通过 <code>/api/v1</code> 访问。</p><h2 id="api-响应格式" tabindex="-1"><a class="header-anchor" href="#api-响应格式" aria-hidden="true">#</a> API 响应格式</h2><p>Prometheus API 使用了 JSON 格式的响应内容。 当 API 调用成功后将会返回 <code>2xx</code> 的 HTTP 状态码。</p><p>反之，当 API 调用失败时可能返回以下几种不同的 HTTP 状态码：</p><ul><li><code>404 Bad Request</code> ：当参数错误或者缺失时。</li><li><code>422 Unprocessable Entity</code> : 当表达式无法执行时。</li><li><code>503 Service Unavailable</code> : 当请求超时或者被中断时。</li></ul><p>所有的 API 请求返回的格式均使用以下的 JSON 格式：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token string">&quot;success&quot;</span> | <span class="token string">&quot;error&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> &lt;data&gt;<span class="token punctuation">,</span>

  <span class="token comment">// Only set if status is &quot;error&quot;. The data field may still hold</span>
  <span class="token comment">// additional data.</span>
  <span class="token property">&quot;errorType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;string&gt;&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;error&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;string&gt;&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),r={href:"https://www.ietf.org/rfc/rfc3339.txt",target:"_blank",rel:"noopener noreferrer"},d=a(`<p>查询参数名称可以用中括号 <code>[]</code> 重复次数。<code>&lt;series_selector&gt;</code> 占位符提供像 <code>http_requests_total</code> 或者 <code>http_requests_total{method=~&quot;(GET|POST)&quot;}</code> 的 Prometheus 时间序列选择器，并需要在 URL 中编码传输。</p><p><code>&lt;duration&gt;</code> 占位符指的是 <code>[0-9]+[smhdwy]</code> 形式的 Prometheus 持续时间字符串。例如：5m 表示 5 分钟的持续时间。</p><p><code>&lt;bool&gt;</code> 提供布尔值（字符串 true 和 false）。</p><h2 id="表达式查询" tabindex="-1"><a class="header-anchor" href="#表达式查询" aria-hidden="true">#</a> 表达式查询</h2><p>通过 HTTP API 我们可以分别通过 <code>/api/v1/query</code> 和 <code>/api/v1/query_range</code> 查询 PromQL 表达式当前或者一定时间范围内的计算结果。</p><h3 id="瞬时数据查询" tabindex="-1"><a class="header-anchor" href="#瞬时数据查询" aria-hidden="true">#</a> 瞬时数据查询</h3><p>通过使用 <code>QUERY API</code> 我们可以查询 PromQL 在特定时间点下的计算结果。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET /api/v1/query
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>URL 请求参数：</p><ul><li><code>query=&lt;string&gt;</code> : PromQL 表达式。</li><li><code>time=&lt;rfc3339 | unix_timestamp&gt;</code> : 用于指定用于计算 PromQL 的时间戳。可选参数，默认情况下使用当前系统时间。</li><li><code>timeout=&lt;duration&gt;</code> : 超时设置。可选参数，默认情况下使用全局设置的参数 <code>-query.timeout</code>。</li></ul><p>如果 <code>time</code> 参数缺省，则使用当前服务器时间。</p><p>当 API 调用成功后，Prometheus 会返回 JSON 格式的响应内容，格式如上小节所示。并且在 data 部分返回查询结果。data 部分格式如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;resultType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;matrix&quot;</span> | <span class="token string">&quot;vector&quot;</span> | <span class="token string">&quot;scalar&quot;</span> | <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;result&quot;</span><span class="token operator">:</span> &lt;value&gt;
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),v=s("code",null,"<value>",-1),k=s("code",null,"resultType",-1),m={href:"https://www.yangcs.net/prometheus/3-prometheus/api.html#%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"},q=a(`<p>例如使用以下表达式查询表达式 <code>up</code> 在时间点 <code>2015-07-01T20:10:51.781Z</code> 的计算结果：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>$ curl &#39;http<span class="token operator">:</span><span class="token comment">//localhost:9090/api/v1/query?query=up&amp;time=2015-07-01T20:10:51.781Z&#39;</span>
<span class="token punctuation">{</span>
   <span class="token property">&quot;status&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span>
   <span class="token property">&quot;data&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;resultType&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;vector&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;result&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span>
         <span class="token punctuation">{</span>
            <span class="token property">&quot;metric&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
               <span class="token property">&quot;__name__&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;up&quot;</span><span class="token punctuation">,</span>
               <span class="token property">&quot;job&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;prometheus&quot;</span><span class="token punctuation">,</span>
               <span class="token property">&quot;instance&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;localhost:9090&quot;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token number">1435781451.781</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span> <span class="token punctuation">]</span>
         <span class="token punctuation">}</span><span class="token punctuation">,</span>
         <span class="token punctuation">{</span>
            <span class="token property">&quot;metric&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
               <span class="token property">&quot;__name__&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;up&quot;</span><span class="token punctuation">,</span>
               <span class="token property">&quot;job&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>
               <span class="token property">&quot;instance&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;localhost:9100&quot;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token property">&quot;value&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token number">1435781451.781</span><span class="token punctuation">,</span> <span class="token string">&quot;0&quot;</span> <span class="token punctuation">]</span>
         <span class="token punctuation">}</span>
      <span class="token punctuation">]</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="区间数据查询" tabindex="-1"><a class="header-anchor" href="#区间数据查询" aria-hidden="true">#</a> 区间数据查询</h3><p>使用 QUERY_RANGE API 我们则可以直接查询 PromQL 表达式在一段时间返回内的计算结果。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET /api/v1/query_range
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>URL 请求参数：</p><ul><li><code>query=&lt;string&gt;</code> : PromQL 表达式。</li><li><code>start=&lt;rfc3339 | unix_timestamp&gt;</code> : 起始时间戳。</li><li><code>end=&lt;rfc3339 | unix_timestamp&gt;</code> : 结束时间戳。</li><li><code>step=&lt;duration | float&gt;</code> : 查询时间步长，时间区间内每 step 秒执行一次。</li><li><code>timeout=&lt;duration&gt;</code> : 超时设置。可选参数，默认情况下使用全局设置的参数 <code>-query.timeout</code>。</li></ul><p>当使用 QUERY_RANGE API 查询 PromQL 表达式时，返回结果一定是一个区间向量：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;resultType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;matrix&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;result&quot;</span><span class="token operator">:</span> &lt;value&gt;
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><blockquote><p><strong>[info]</strong> 注意</p><p>在 QUERY_RANGE API 中 PromQL 只能使用瞬时向量选择器类型的表达式。</p></blockquote><br>`,12),b=s("code",null,"<value>",-1),h={href:"https://www.yangcs.net/prometheus/3-prometheus/api.html#%E5%8C%BA%E9%97%B4%E5%90%91%E9%87%8F",target:"_blank",rel:"noopener noreferrer"},g=a(`<p>例如使用以下表达式查询表达式 <code>up</code> 在 30 秒范围内以 15 秒为间隔计算 PromQL 表达式的结果。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>$ curl &#39;http<span class="token operator">:</span><span class="token comment">//localhost:9090/api/v1/query_range?query=up&amp;start=2015-07-01T20:10:30.781Z&amp;end=2015-07-01T20:11:00.781Z&amp;step=15s&#39;</span>
<span class="token punctuation">{</span>
   <span class="token property">&quot;status&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span>
   <span class="token property">&quot;data&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;resultType&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;matrix&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;result&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span>
         <span class="token punctuation">{</span>
            <span class="token property">&quot;metric&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
               <span class="token property">&quot;__name__&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;up&quot;</span><span class="token punctuation">,</span>
               <span class="token property">&quot;job&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;prometheus&quot;</span><span class="token punctuation">,</span>
               <span class="token property">&quot;instance&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;localhost:9090&quot;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token property">&quot;values&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span>
               <span class="token punctuation">[</span> <span class="token number">1435781430.781</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
               <span class="token punctuation">[</span> <span class="token number">1435781445.781</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
               <span class="token punctuation">[</span> <span class="token number">1435781460.781</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span> <span class="token punctuation">]</span>
            <span class="token punctuation">]</span>
         <span class="token punctuation">}</span><span class="token punctuation">,</span>
         <span class="token punctuation">{</span>
            <span class="token property">&quot;metric&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
               <span class="token property">&quot;__name__&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;up&quot;</span><span class="token punctuation">,</span>
               <span class="token property">&quot;job&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>
               <span class="token property">&quot;instance&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;localhost:9091&quot;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token property">&quot;values&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span>
               <span class="token punctuation">[</span> <span class="token number">1435781430.781</span><span class="token punctuation">,</span> <span class="token string">&quot;0&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
               <span class="token punctuation">[</span> <span class="token number">1435781445.781</span><span class="token punctuation">,</span> <span class="token string">&quot;0&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
               <span class="token punctuation">[</span> <span class="token number">1435781460.781</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span> <span class="token punctuation">]</span>
            <span class="token punctuation">]</span>
         <span class="token punctuation">}</span>
      <span class="token punctuation">]</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="查询元数据" tabindex="-1"><a class="header-anchor" href="#查询元数据" aria-hidden="true">#</a> 查询元数据</h2><h3 id="通过标签选择器查找时间序列" tabindex="-1"><a class="header-anchor" href="#通过标签选择器查找时间序列" aria-hidden="true">#</a> 通过标签选择器查找时间序列</h3><p>以下表达式返回与特定标签集匹配的时间序列列表：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET /api/v1/series
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>URL 请求参数：</p><ul><li><code>match[]=&lt;series_selector&gt;</code> : 表示标签选择器是 <code>series_selector</code>。必须至少提供一个 <code>match[]</code> 参数。</li><li><code>start=&lt;rfc3339 | unix_timestamp&gt;</code> : 起始时间戳。</li><li><code>end=&lt;rfc3339 | unix_timestamp&gt;</code> : 结束时间戳。</li></ul><p>返回结果的 data 部分，是由 key-value 键值对的对象列表组成的。</p><p>例如使用以下表达式查询表达式 <code>up</code> 或 <code>process_start_time_seconds{job=&quot;prometheus&quot;}</code> 的计算结果：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>$ curl -g &#39;http<span class="token operator">:</span><span class="token comment">//localhost:9090/api/v1/series?match[]=up&amp;match[]=process_start_time_seconds{job=&quot;prometheus&quot;}&#39;</span>
<span class="token punctuation">{</span>
   <span class="token property">&quot;status&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span>
   <span class="token property">&quot;data&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
         <span class="token property">&quot;__name__&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;up&quot;</span><span class="token punctuation">,</span>
         <span class="token property">&quot;job&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;prometheus&quot;</span><span class="token punctuation">,</span>
         <span class="token property">&quot;instance&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;localhost:9090&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
         <span class="token property">&quot;__name__&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;up&quot;</span><span class="token punctuation">,</span>
         <span class="token property">&quot;job&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>
         <span class="token property">&quot;instance&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;localhost:9091&quot;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
         <span class="token property">&quot;__name__&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;process_start_time_seconds&quot;</span><span class="token punctuation">,</span>
         <span class="token property">&quot;job&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;prometheus&quot;</span><span class="token punctuation">,</span>
         <span class="token property">&quot;instance&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;localhost:9090&quot;</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查询标签值" tabindex="-1"><a class="header-anchor" href="#查询标签值" aria-hidden="true">#</a> 查询标签值</h3><p>下面这个例子返回了带有指定标签的的时间序列列表：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>GET /api/v1/label/<span class="token operator">&lt;</span>label_name<span class="token operator">&gt;</span>/values
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>返回结果的 <code>data</code> 部分是一个标签值列表。例如，以下表达式返回结果的 data 部分是标签名称为 <code>job</code> 的所有标签值：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>$ curl http<span class="token operator">:</span><span class="token comment">//localhost:9090/api/v1/label/job/values</span>
<span class="token punctuation">{</span>
   <span class="token property">&quot;status&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">,</span>
   <span class="token property">&quot;data&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>
      <span class="token string">&quot;prometheus&quot;</span>
   <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="响应数据格式" tabindex="-1"><a class="header-anchor" href="#响应数据格式" aria-hidden="true">#</a> 响应数据格式</h2><p>表达式查询结果可能会在 data 部分的 <code>result</code> 字段中返回以下的响应值。其中 <code>&lt;sample_value&gt;</code> 占位符是数值样本值。由于 json 不支持特殊浮点值，例如：<code>NaN</code>, <code>Inf</code>, 和 <code>-Inf</code>，所以样本值将会作为字符串（而不是原始数值）来进行传输。</p><h3 id="区间向量" tabindex="-1"><a class="header-anchor" href="#区间向量" aria-hidden="true">#</a> 区间向量</h3><p>当返回数据类型 resultType 为 <code>matrix</code> 时，<code>result</code> 响应格式如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;metric&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;&lt;label_name&gt;&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;label_value&gt;&quot;</span><span class="token punctuation">,</span> ... <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;values&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span> &lt;unix_time&gt;<span class="token punctuation">,</span> <span class="token string">&quot;&lt;sample_value&gt;&quot;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> ... <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  ...
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>metrics</code> 表示当前时间序列的特征维度，<code>values</code> 包含当前事件序列的一组样本。</p><h3 id="瞬时向量" tabindex="-1"><a class="header-anchor" href="#瞬时向量" aria-hidden="true">#</a> 瞬时向量</h3><p>当返回数据类型 resultType 为 <code>vector</code> 时，<code>result</code> 响应格式如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;metric&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;&lt;label_name&gt;&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;label_value&gt;&quot;</span><span class="token punctuation">,</span> ... <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;value&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> &lt;unix_time&gt;<span class="token punctuation">,</span> <span class="token string">&quot;&lt;sample_value&gt;&quot;</span> <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  ...
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中 <code>metrics</code> 表示当前时间序列的特征维度，<code>values</code> 包含当前事件序列的一组样本。</p><h3 id="标量" tabindex="-1"><a class="header-anchor" href="#标量" aria-hidden="true">#</a> 标量</h3><p>当返回数据类型 resultType 为 <code>scalar</code> 时，<code>result</code> 响应格式如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">[</span> &lt;unix_time&gt;<span class="token punctuation">,</span> <span class="token string">&quot;&lt;scalar_value&gt;&quot;</span> <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于标量不存在时间序列一说，因此 <code>result</code> 表示为当前系统时间一个标量的值。</p><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h3><p>当返回数据类型 resultType 为 <code>string</code> 时，<code>result</code> 响应格式如下：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">[</span> &lt;unix_time&gt;<span class="token punctuation">,</span> <span class="token string">&quot;&lt;string_value&gt;&quot;</span> <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>字符串类型的响应内容格式和标量相同。</p>`,34);function _(y,x){const t=p("ExternalLinkIcon");return c(),l("div",null,[u,s("p",null,[n("输入时间戳可以由 "),s("a",r,[n("RFC3339"),e(t)]),n(" 格式或者 Unix 时间戳提供，后面可选的小数位可以精确到亚秒级别。输出时间戳以 Unix 时间戳的方式呈现。")]),d,s("p",null,[v,n(" 指的是查询结果数据，具体的格式取决于 "),k,n("，不同的结果类型，会有不同的结果数据格式。参考 "),s("a",m,[n("响应数据格式"),e(t)]),n("。")]),q,s("p",null,[n("对于 "),b,n(" 占位符的格式，详见 "),s("a",h,[n("区间向量查询结果格式"),e(t)]),n("。")]),g])}const P=o(i,[["render",_],["__file","api.html.vue"]]);export{P as default};
